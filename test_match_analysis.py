#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç—á–µ–π.
–ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π.
"""

import asyncio
import sys
from utils.match_analyzer import MatchAnalyzer, format_match_analysis
from utils.map_analyzer import MapAnalyzer, WeaponAnalyzer
from faceit.api import FaceitAPI

# –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–∞—Ç—á–∏ FACEIT (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ)
TEST_URLS = [
    "https://www.faceit.com/en/cs2/room/1-abc123-def456-ghi789",
    "faceit.com/en/cs2/room/test-match-id-123",
    "https://faceit.com/en/cs2/room/another-test-id"
]

def test_url_parsing():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ URL."""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ URL...")
    
    faceit_api = FaceitAPI()
    analyzer = MatchAnalyzer(faceit_api)
    
    test_cases = [
        "https://www.faceit.com/en/cs2/room/1-abc123-def456-ghi789",
        "https://faceit.com/en/cs2/room/abc123-def456-ghi789", 
        "faceit.com/en/cs2/room/1-test-match-id",
        "invalid-url",
        "https://google.com"
    ]
    
    for url in test_cases:
        match_id = analyzer.parse_faceit_url(url)
        status = "‚úÖ" if match_id else "‚ùå"
        print(f"{status} URL: {url[:50]}... -> ID: {match_id}")
    
    print()

def test_map_analyzer():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∫–∞—Ä—Ç."""
    print("üó∫Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∫–∞—Ä—Ç...")
    
    # –¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–∞—Ä—Ç
    test_maps = ["mirage", "de_dust2", "Inferno", "de_vertigo", "unknown_map"]
    
    for map_name in test_maps:
        normalized = MapAnalyzer._normalize_map_name(map_name)
        display_name = MapAnalyzer.MAP_POOL.get(normalized, normalized)
        print(f"üìç {map_name} -> {normalized} ({display_name})")
    
    print()

def test_weapon_analyzer():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –æ—Ä—É–∂–∏—è –∏ —Å—Ç–∏–ª–µ–π."""
    print("‚öîÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å—Ç–∏–ª–µ–π –∏–≥—Ä—ã...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–∏
    test_stats = [
        {"avg_kd": 1.5, "avg_adr": 85, "avg_hs_rate": 55, "desc": "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π AWPer"},
        {"avg_kd": 1.2, "avg_adr": 78, "avg_hs_rate": 45, "desc": "Entry Fragger"},
        {"avg_kd": 0.8, "avg_adr": 65, "avg_hs_rate": 40, "desc": "Support"},
        {"avg_kd": 1.1, "avg_adr": 72, "avg_hs_rate": 42, "desc": "Rifler"}
    ]
    
    for stats in test_stats:
        role = WeaponAnalyzer._determine_role(
            stats["avg_kd"], stats["avg_adr"], stats["avg_hs_rate"], 3, 10, 2
        )
        aggression = WeaponAnalyzer._determine_aggression(
            stats["avg_kd"], stats["avg_adr"], 3, 10, 2
        )
        print(f"üéØ {stats['desc']}: {role} ({aggression})")
    
    print()

async def test_match_analysis_flow():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç—á–∞."""
    print("‚öîÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç—á–∞...")
    
    faceit_api = FaceitAPI()
    analyzer = MatchAnalyzer(faceit_api)
    
    # –¢–µ—Å—Ç —Å —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Å—ã–ª–∫–æ–π
    test_url = "https://www.faceit.com/en/cs2/room/1-test-match-id"
    
    print(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞: {test_url}")
    
    try:
        result = await analyzer.analyze_match(test_url)
        
        if result.get("success"):
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            required_keys = ["match", "team_analyses", "insights"]
            for key in required_keys:
                if key in result:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–ª—é—á: {key}")
                else:
                    print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á: {key}")
            
            # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            formatted = format_match_analysis(result)
            print(f"üìÑ –î–ª–∏–Ω–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {len(formatted)} —Å–∏–º–≤–æ–ª–æ–≤")
            
        else:
            error = result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {error}")
            
            # –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Å—ã–ª–∫–∏
            if "–Ω–µ –Ω–∞–π–¥–µ–Ω" in error.lower() or "–∏–∑–≤–ª–µ—á—å" in error.lower():
                print("‚ÑπÔ∏è –≠—Ç–æ –æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Å—ã–ª–∫–∏")
    
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
    
    print()

def test_data_structures():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö."""
    print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ò–º–ø–æ—Ä—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    from utils.match_analyzer import PlayerAnalysis, TeamAnalysis
    from faceit.models import FaceitPlayer
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    test_player_data = {
        "player_id": "test-id",
        "nickname": "TestPlayer",
        "avatar": "",
        "country": "RU",
        "games": {}
    }
    
    try:
        test_player = FaceitPlayer(**test_player_data)
        player_analysis = PlayerAnalysis(test_player)
        
        print(f"‚úÖ PlayerAnalysis —Å–æ–∑–¥–∞–Ω –¥–ª—è: {test_player.nickname}")
        print(f"   Danger level: {player_analysis.danger_level}")
        print(f"   Role: {player_analysis.role}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–∞–Ω–¥—ã
        team_analysis = TeamAnalysis("TestTeam")
        team_analysis.players.append(player_analysis)
        
        print(f"‚úÖ TeamAnalysis —Å–æ–∑–¥–∞–Ω: {team_analysis.team_name}")
        print(f"   –ò–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ: {len(team_analysis.players)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä: {e}")
    
    print()

def test_error_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫."""
    print("üõ†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
    
    faceit_api = FaceitAPI()
    analyzer = MatchAnalyzer(faceit_api)
    
    # –¢–µ—Å—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ URL
    error_cases = [
        "",
        None,
        "invalid-url",
        "https://google.com",
        "not-a-url-at-all"
    ]
    
    for case in error_cases:
        try:
            match_id = analyzer.parse_faceit_url(case) if case else None
            if match_id:
                print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ —É—Å–ø–µ—à–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥: {case} -> {match_id}")
            else:
                print(f"‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞: {case}")
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è {case}: {e}")
    
    print()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç—á–µ–π")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    test_url_parsing()
    test_map_analyzer() 
    test_weapon_analyzer()
    test_data_structures()
    test_error_handling()
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    await test_match_analysis_flow()
    
    print("=" * 50)
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    print()
    print("üìã –ß—Ç–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ:")
    print("‚Ä¢ –ü–∞—Ä—Å–∏–Ω–≥ URL FACEIT")
    print("‚Ä¢ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –∫–∞—Ä—Ç")
    print("‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π –∏–≥—Ä–æ–∫–æ–≤")
    print("‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö")
    print("‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫")
    print("‚Ä¢ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞")
    print()
    print("üéØ –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("1. –ó–∞–º–µ–Ω–∏—Ç–µ TEST_URLS –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏")
    print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ FACEIT API")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /analyze")

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python
    if sys.version_info < (3, 7):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.7 –∏–ª–∏ –≤—ã—à–µ")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)