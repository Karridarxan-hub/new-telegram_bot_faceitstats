"""Admin queue management commands and utilities."""

import logging
from typing import Dict, List, Optional, Any

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.enums import ParseMode

from queues.task_manager import get_task_manager, TaskPriority, TaskStatus
from utils.admin import AdminManager
from bot.queue_handlers import user_active_tasks, get_user_active_tasks, cleanup_completed_tasks
from bot.callbacks import get_registered_callbacks, cleanup_expired_callbacks

logger = logging.getLogger(__name__)

# Create admin queue router
admin_queue_router = Router()

# Global task manager
task_manager = get_task_manager()


@admin_queue_router.message(Command("admin_queue_status"))
async def cmd_admin_queue_status(message: Message) -> None:
    """Admin command: Get queue system status."""
    if not AdminManager.is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    try:
        # Get queue statistics
        stats = task_manager.get_queue_stats()
        
        # Get Redis connection status
        redis_status = "üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω" if task_manager.is_redis_available() else "üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        
        # Build status message
        status_message = (
            "üìä <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –æ—á–µ—Ä–µ–¥–µ–π</b>\n\n"
            f"üî¥ <b>Redis:</b> {redis_status}\n\n"
            f"üìù <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π:</b>\n"
        )
        
        if "error" in stats:
            status_message += f"‚ùå –û—à–∏–±–∫–∞: {stats['error']}"
        else:
            # Queue statistics
            for queue_name, queue_stats in stats.items():
                if isinstance(queue_stats, dict):
                    total_jobs = queue_stats.get('total_jobs', 0)
                    queued_jobs = queue_stats.get('queued_jobs', 0)
                    started_jobs = queue_stats.get('started_jobs', 0)
                    finished_jobs = queue_stats.get('finished_jobs', 0)
                    failed_jobs = queue_stats.get('failed_jobs', 0)
                    
                    status_message += f"\nüî∏ <b>{queue_name}:</b>\n"
                    status_message += f"  üìä –í—Å–µ–≥–æ: {total_jobs}\n"
                    status_message += f"  ‚è≥ –í –æ—á–µ—Ä–µ–¥–∏: {queued_jobs}\n"
                    status_message += f"  üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {started_jobs}\n"
                    status_message += f"  ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {finished_jobs}\n"
                    status_message += f"  ‚ùå –û—à–∏–±–∫–∏: {failed_jobs}\n"
        
        # Get active users count
        active_users = len(user_active_tasks) if user_active_tasks else 0
        status_message += f"\nüë• <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {active_users}"
        
        # Create action keyboard
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_queue_refresh"),
                InlineKeyboardButton(text="üìà –ú–µ—Ç—Ä–∏–∫–∏", callback_data="admin_queue_metrics")
            ],
            [
                InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å", callback_data="admin_queue_cleanup"),
                InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_queue_users")
            ]
        ])
        
        await message.answer(status_message, parse_mode=ParseMode.HTML, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error getting queue status: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—á–µ—Ä–µ–¥–µ–π")


@admin_queue_router.message(Command("admin_queue_metrics"))
async def cmd_admin_queue_metrics(message: Message) -> None:
    """Admin command: Get detailed queue metrics."""
    if not AdminManager.is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    try:
        # Get system metrics
        metrics = task_manager.get_system_metrics()
        
        if "error" in metrics:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {metrics['error']}")
            return
        
        # Format metrics message
        metrics_message = "üìà <b>–î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
        
        # Redis metrics
        redis_metrics = metrics.get("redis_metrics", {})
        metrics_message += "üî¥ <b>Redis:</b>\n"
        metrics_message += f"‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {redis_metrics.get('connected_clients', 0)}\n"
        metrics_message += f"‚Ä¢ –ü–∞–º—è—Ç—å: {redis_metrics.get('used_memory_human', '0B')}\n"
        metrics_message += f"‚Ä¢ –ö–æ–º–∞–Ω–¥—ã: {redis_metrics.get('total_commands_processed', 0):,}\n"
        
        keyspace_hits = redis_metrics.get('keyspace_hits', 0)
        keyspace_misses = redis_metrics.get('keyspace_misses', 0)
        if keyspace_hits + keyspace_misses > 0:
            hit_rate = round((keyspace_hits / (keyspace_hits + keyspace_misses)) * 100, 1)
            metrics_message += f"‚Ä¢ Hit Rate: {hit_rate}%\n"
        
        metrics_message += "\n"
        
        # Job statistics
        job_stats = metrics.get("job_statistics", {})
        metrics_message += "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á:</b>\n"
        metrics_message += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {job_stats.get('total_jobs', 0):,}\n"
        metrics_message += f"‚Ä¢ –í –æ—á–µ—Ä–µ–¥–∏: {job_stats.get('total_queued', 0)}\n"
        metrics_message += f"‚Ä¢ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {job_stats.get('total_started', 0)}\n"
        metrics_message += f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {job_stats.get('total_finished', 0):,}\n"
        metrics_message += f"‚Ä¢ –û—à–∏–±–∫–∏: {job_stats.get('total_failed', 0)}\n"
        metrics_message += f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {job_stats.get('success_rate', 0)}%\n\n"
        
        # Task management
        task_mgmt = metrics.get("task_management", {})
        metrics_message += "üéØ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏:</b>\n"
        metrics_message += f"‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è: {task_mgmt.get('active_tasks_tracked', 0)}\n"
        metrics_message += f"‚Ä¢ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {task_mgmt.get('scheduled_tasks', 0)}\n"
        metrics_message += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ: {task_mgmt.get('enabled_scheduled_tasks', 0)}\n\n"
        
        await message.answer(metrics_message, parse_mode=ParseMode.HTML)
        
    except Exception as e:
        logger.error(f"Error getting queue metrics: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫ –æ—á–µ—Ä–µ–¥–µ–π")