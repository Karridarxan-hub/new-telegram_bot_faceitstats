#!/usr/bin/env python3
"""Simple FACEIT Bot without queue system for testing."""

import asyncio
import logging
from datetime import datetime

from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command, CommandStart
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

from config.settings import settings, validate_settings
from faceit.api import FaceitAPI
from utils.storage import storage, UserData, SubscriptionTier
from utils.formatter import MessageFormatter

# Setup logging
logging.basicConfig(
    level=getattr(logging, settings.log_level),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Create router
router = Router()

# Initialize FACEIT API
faceit_api = FaceitAPI()

# States for conversation flow
class ProfileStates(StatesGroup):
    waiting_nickname = State()


def get_main_menu():
    """Get main menu keyboard."""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="üéÆ –ü–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ç—á")],
            [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üîç –ù–∞–π—Ç–∏ –∏–≥—Ä–æ–∫–∞")],
            [KeyboardButton(text="‚öîÔ∏è –ê–Ω–∞–ª–∏–∑ –º–∞—Ç—á–∞"), KeyboardButton(text="üíé –ü–æ–¥–ø–∏—Å–∫–∞")],
            [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å"), KeyboardButton(text="‚ö° –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    """Handle /start command."""
    logger.info(f"Start command from user {message.from_user.id}")
    
    # Check if user already has account linked
    user = await storage.get_user(message.from_user.id)
    
    welcome_text = """üéÆ <b>FACEIT Telegram Bot</b>

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å FACEIT –º–∞—Ç—á–∏ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–æ–≤.

<b>üöÄ –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
‚öîÔ∏è –ê–Ω–∞–ª–∏–∑ –º–∞—Ç—á–µ–π —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏  
üìà –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
üéØ –ê–Ω–∞–ª–∏–∑ —É—Ä–æ–≤–Ω—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤
üíé Premium —Ñ—É–Ω–∫—Ü–∏–∏

<b>üí° –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ
‚Ä¢ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ FACEIT –Ω–∏–∫–Ω–µ–π–º –¥–ª—è –ø–æ–∏—Å–∫–∞

<b>üìã –ö–æ–º–∞–Ω–¥—ã:</b>
/profile –Ω–∏–∫–Ω–µ–π–º - –ø—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞
/link –Ω–∏–∫–Ω–µ–π–º - –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
/stats - –º–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞  
/help - –ø–æ–¥—Ä–æ–±–Ω–∞—è –ø–æ–º–æ—â—å"""
    
    if user and user.faceit_nickname:
        welcome_text += f"\n\n‚úÖ <b>–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç:</b> {user.faceit_nickname}"
        # Show main menu
        await message.answer(welcome_text, parse_mode=ParseMode.HTML, reply_markup=get_main_menu())
    else:
        welcome_text += "\n\nüéØ <b>–ù–∞–ø–∏—à–∏—Ç–µ FACEIT –Ω–∏–∫–Ω–µ–π–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞:</b>"
        await message.answer(welcome_text, parse_mode=ParseMode.HTML)
        await state.set_state(ProfileStates.waiting_nickname)


@router.message(Command("profile"))
async def cmd_profile(message: Message):
    """Profile command handler."""
    logger.info(f"Profile command from user {message.from_user.id}")
    
    # Extract nickname from command
    args = message.text.split()[1:] if message.text else []
    if not args:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /profile <nickname>\n\n–ü—Ä–∏–º–µ—Ä: /profile s1mple")
        return
    
    nickname = args[0]
    
    try:
        await message.answer("üîç –ò—â—É –∏–≥—Ä–æ–∫–∞...")
        
        # Search for player
        player = await faceit_api.search_player(nickname)
        
        if not player:
            await message.answer(f"‚ùå –ò–≥—Ä–æ–∫ <b>{nickname}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω", parse_mode=ParseMode.HTML)
            return
        
        # Format player info
        profile_text = MessageFormatter.format_player_info(player)
        
        await message.answer(profile_text, parse_mode=ParseMode.HTML)
        logger.info(f"Profile shown for player {player.nickname}")
        
    except Exception as e:
        logger.error(f"Error in profile command: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏–≥—Ä–æ–∫–∞")


@router.message(Command("link"))
async def cmd_link(message: Message):
    """Link FACEIT account command."""
    logger.info(f"Link command from user {message.from_user.id}")
    
    # Extract nickname from command
    args = message.text.split()[1:] if message.text else []
    if not args:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /link <nickname>\n\n–ü—Ä–∏–º–µ—Ä: /link s1mple")
        return
    
    nickname = args[0]
    
    try:
        await message.answer("üîç –ü—Ä–æ–≤–µ—Ä—è—é –∏–≥—Ä–æ–∫–∞...")
        
        # Search for player
        player = await faceit_api.search_player(nickname)
        
        if not player:
            await message.answer(f"‚ùå –ò–≥—Ä–æ–∫ <b>{nickname}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω", parse_mode=ParseMode.HTML)
            return
        user_id = message.from_user.id
        
        # Store user data
        user_data = {
            "telegram_id": user_id,
            "username": message.from_user.username,
            "first_name": message.from_user.first_name,
            "faceit_player_id": player.player_id,
            "faceit_nickname": player.nickname,
            "linked_at": datetime.now().isoformat()
        }
        
        await storage.store_user_data(user_id, user_data)
        
        await message.answer(
            f"‚úÖ <b>–ê–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω!</b>\n\n"
            f"üéÆ FACEIT: <b>{player.nickname}</b>\n"
            f"üìä –£—Ä–æ–≤–µ–Ω—å: <b>{getattr(player, 'skill_level', 'N/A')}</b>\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /stats –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            parse_mode=ParseMode.HTML
        )
        logger.info(f"User {user_id} linked to FACEIT player {player.nickname}")
        
    except Exception as e:
        logger.error(f"Error in link command: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞")


@router.message(Command("stats"))
async def cmd_stats(message: Message):
    """Stats command handler."""
    logger.info(f"Stats command from user {message.from_user.id}")
    
    try:
        user_id = message.from_user.id
        user = await storage.get_user(user_id)
        
        if not user or not user.faceit_player_id:
            await message.answer(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ FACEIT –∞–∫–∫–∞—É–Ω—Ç –∫–æ–º–∞–Ω–¥–æ–π /link <nickname>"
            )
            return
        
        await message.answer("üìä –ü–æ–ª—É—á–∞—é –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
        
        # Get player details
        player = await faceit_api.get_player_by_id(user.faceit_player_id)
        
        if not player:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            return
        
        # Format stats
        stats_text = MessageFormatter.format_player_info(player)
        
        await message.answer(stats_text, parse_mode=ParseMode.HTML)
        logger.info(f"Stats shown for user {user_id}")
        
    except Exception as e:
        logger.error(f"Error in stats command: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@router.message(Command("help"))
async def cmd_help(message: Message):
    """Help command handler."""
    help_text = """ü§ñ <b>FACEIT Telegram Bot - –ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ</b>

<b>üöÄ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫
/profile –Ω–∏–∫–Ω–µ–π–º - –ü—Ä–æ—Ñ–∏–ª—å –ª—é–±–æ–≥–æ –∏–≥—Ä–æ–∫–∞
/link –Ω–∏–∫–Ω–µ–π–º - –ü—Ä–∏–≤—è–∑–∞—Ç—å FACEIT –∞–∫–∫–∞—É–Ω—Ç
/stats - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–ø–æ—Å–ª–µ –ø—Ä–∏–≤—è–∑–∫–∏)
/help - –≠—Ç–æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ

<b>üéÆ –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é:</b>
üìä <b>–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> - –≤–∞—à–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b> - –≤–∞—à –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
üîç <b>–ù–∞–π—Ç–∏ –∏–≥—Ä–æ–∫–∞</b> - –ø–æ–∏—Å–∫ –ø–æ –Ω–∏–∫–Ω–µ–π–º—É
‚öîÔ∏è <b>–ê–Ω–∞–ª–∏–∑ –º–∞—Ç—á–∞</b> - –∞–Ω–∞–ª–∏–∑ –º–∞—Ç—á–µ–π (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
üíé <b>–ü–æ–¥–ø–∏—Å–∫–∞</b> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π
‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å</b> - —ç—Ç–æ –º–µ–Ω—é

<b>‚ö° –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫:</b>
‚Ä¢ –ü–æ—Å–ª–µ /start –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º
‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üîç –ù–∞–π—Ç–∏ –∏–≥—Ä–æ–∫–∞"
‚Ä¢ –ü—Ä–∏–º–µ—Ä: –Ω–∞–ø–∏—à–∏—Ç–µ "s1mple" –¥–ª—è –ø–æ–∏—Å–∫–∞

<b>üîó –ü—Ä–∏–≤—è–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞:</b>
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /link –Ω–∏–∫–Ω–µ–π–º
2. –ò–ª–∏ –Ω–∞–π–¥–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–∏–≤—è–∑–∫–∏
3. –ü–æ—Å–ª–µ –ø—Ä–∏–≤—è–∑–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–Ω–æ–ø–∫–∞ "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"

<b>üìä –ß—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–æ—Ç:</b>
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ CS2
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–∞ –∏ ELO
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–µ –∏–≥—Ä–æ–∫–∞
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)

<b>üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ:</b>
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –º–∞—Ç—á–µ–π —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
‚Ä¢ Premium –ø–æ–¥–ø–∏—Å–∫–∏
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –º–∞—Ç—á–∞—Ö

<b>üí° –°–æ–≤–µ—Ç—ã:</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
‚Ä¢ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã
‚Ä¢ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    
    await message.answer(help_text, parse_mode=ParseMode.HTML, reply_markup=get_main_menu())


@router.message(ProfileStates.waiting_nickname)
async def process_nickname(message: Message, state: FSMContext):
    """Process nickname after /start command."""
    nickname = message.text.strip()
    logger.info(f"Processing nickname '{nickname}' from user {message.from_user.id}")
    
    if not nickname:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º:")
        return
    
    try:
        await message.answer("üîç –ò—â—É –∏–≥—Ä–æ–∫–∞...")
        
        # Search for player
        player = await faceit_api.search_player(nickname)
        
        if not player:
            await message.answer(
                f"‚ùå –ò–≥—Ä–æ–∫ <b>{nickname}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n"
                f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è\n"
                f"‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º\n"
                f"‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å –¥—Ä—É–≥–æ–π –Ω–∏–∫–Ω–µ–π–º\n\n"
                f"–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                f"/profile –Ω–∏–∫–Ω–µ–π–º - –ø–æ–∏—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è\n"
                f"/help - –ø–æ–º–æ—â—å",
                parse_mode=ParseMode.HTML
            )
            await state.clear()
            return
        
        # Format player info
        profile_text = MessageFormatter.format_player_info(player)
        
        # Create action buttons
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text=f"üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å {nickname}", callback_data=f"link_{nickname}"),
                InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –¥—Ä—É–≥–æ–≥–æ", callback_data="search_another")
            ],
            [
                InlineKeyboardButton(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats"),
                InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
            ]
        ])
        
        profile_text += f"\n\nüí° <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"
        
        await message.answer(profile_text, parse_mode=ParseMode.HTML, reply_markup=keyboard)
        await state.clear()
        
        logger.info(f"Profile shown for player {player.nickname}")
        
    except Exception as e:
        logger.error(f"Error processing nickname: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–≥—Ä–æ–∫–∞\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–º–æ—â–∏"
        )
        await state.clear()


# Button handlers
@router.message(F.text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def btn_my_stats(message: Message):
    """Handle 'My Stats' button."""
    await cmd_stats(message)


@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")  
async def btn_profile(message: Message, state: FSMContext):
    """Handle 'Profile' button."""
    user = await storage.get_user(message.from_user.id)
    
    if user and user.faceit_nickname:
        # Show linked account profile
        try:
            player = await faceit_api.get_player_by_id(user.faceit_player_id)
            if player:
                profile_text = MessageFormatter.format_player_info(player)
                await message.answer(profile_text, parse_mode=ParseMode.HTML)
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è")
        except Exception as e:
            logger.error(f"Error getting profile: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è")
    else:
        await message.answer(
            "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /link –Ω–∏–∫–Ω–µ–π–º –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞"
        )


@router.message(F.text == "üîç –ù–∞–π—Ç–∏ –∏–≥—Ä–æ–∫–∞")
async def btn_find_player(message: Message, state: FSMContext):
    """Handle 'Find Player' button."""
    await message.answer("üîç <b>–ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞</b>\n\n–ù–∞–ø–∏—à–∏—Ç–µ FACEIT –Ω–∏–∫–Ω–µ–π–º:", parse_mode=ParseMode.HTML)
    await state.set_state(ProfileStates.waiting_nickname)


@router.message(F.text == "‚ö° –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫")
async def btn_quick_search(message: Message, state: FSMContext):
    """Handle 'Quick Search' button."""
    await btn_find_player(message, state)


@router.message(F.text == "‚öîÔ∏è –ê–Ω–∞–ª–∏–∑ –º–∞—Ç—á–∞")
async def btn_match_analysis(message: Message):
    """Handle 'Match Analysis' button."""
    await message.answer(
        "‚öîÔ∏è <b>–ê–Ω–∞–ª–∏–∑ –º–∞—Ç—á–∞</b>\n\n"
        "üöß –§—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n"
        "–ê–Ω–∞–ª–∏–∑ –º–∞—Ç—á–µ–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n"
        "üí° –ü–æ–∫–∞ —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–æ–≤\n"
        "‚Ä¢ –ù–∞–π—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—å –ª—é–±–æ–≥–æ –∏–≥—Ä–æ–∫–∞\n"
        "‚Ä¢ –ü—Ä–∏–≤—è–∑–∞—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è",
        parse_mode=ParseMode.HTML
    )


@router.message(F.text == "üíé –ü–æ–¥–ø–∏—Å–∫–∞")
async def btn_subscription(message: Message):
    """Handle 'Subscription' button."""
    user = await storage.get_user(message.from_user.id)
    
    if user and user.subscription:
        tier = user.subscription.tier
        if tier == SubscriptionTier.FREE:
            status_text = "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è"
        elif tier == SubscriptionTier.PREMIUM:
            status_text = "üíé Premium"  
        elif tier == SubscriptionTier.PRO:
            status_text = "üëë Pro"
        else:
            status_text = "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è"
            
        await message.answer(
            f"üíé <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n"
            f"üìã –¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω: {status_text}\n"
            f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {user.subscription.requests_used}/{user.subscription.requests_limit}\n\n"
            f"üöß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
            parse_mode=ParseMode.HTML
        )
    else:
        await message.answer(
            "üíé <b>–ü–æ–¥–ø–∏—Å–∫–∞</b>\n\n"
            "üÜì –£ –≤–∞—Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω\n"
            "üöß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
            parse_mode=ParseMode.HTML
        )


@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def btn_help(message: Message):
    """Handle 'Help' button."""
    await cmd_help(message)


# Callback handlers for inline keyboard buttons
@router.callback_query(F.data.startswith("link_"))
async def callback_link_account(callback: CallbackQuery):
    """Handle account linking callback."""
    await callback.answer()
    
    nickname = callback.data.replace("link_", "")
    
    try:
        await callback.message.edit_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –∏–≥—Ä–æ–∫–∞...")
        
        # Search for player
        player = await faceit_api.search_player(nickname)
        
        if not player:
            await callback.message.edit_text(
                f"‚ùå –ò–≥—Ä–æ–∫ <b>{nickname}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω",
                parse_mode=ParseMode.HTML
            )
            return
        
        user_id = callback.from_user.id
        
        # Store user data
        user_data = {
            "telegram_id": user_id,
            "username": callback.from_user.username,
            "first_name": callback.from_user.first_name,
            "faceit_player_id": player.player_id,
            "faceit_nickname": player.nickname,
            "linked_at": datetime.now().isoformat()
        }
        
        await storage.store_user_data(user_id, user_data)
        
        await callback.message.edit_text(
            f"‚úÖ <b>–ê–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω!</b>\n\n"
            f"üéÆ FACEIT: <b>{player.nickname}</b>\n"
            f"üìä –£—Ä–æ–≤–µ–Ω—å: <b>{getattr(player, 'skill_level', 'N/A')}</b>\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É \"üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\"",
            parse_mode=ParseMode.HTML,
            reply_markup=get_main_menu()
        )
        logger.info(f"User {user_id} linked to FACEIT player {player.nickname}")
        
    except Exception as e:
        logger.error(f"Error in link callback: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞")


@router.callback_query(F.data == "search_another")
async def callback_search_another(callback: CallbackQuery, state: FSMContext):
    """Handle search another player callback."""
    await callback.answer()
    
    await callback.message.edit_text(
        "üîç <b>–ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞</b>\n\n–ù–∞–ø–∏—à–∏—Ç–µ FACEIT –Ω–∏–∫–Ω–µ–π–º:",
        parse_mode=ParseMode.HTML
    )
    await state.set_state(ProfileStates.waiting_nickname)


@router.callback_query(F.data == "my_stats")
async def callback_my_stats(callback: CallbackQuery):
    """Handle my stats callback."""
    await callback.answer()
    
    try:
        user_id = callback.from_user.id
        user = await storage.get_user(user_id)
        
        if not user or not user.faceit_player_id:
            await callback.message.edit_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ FACEIT –∞–∫–∫–∞—É–Ω—Ç\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /link –Ω–∏–∫–Ω–µ–π–º –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞",
                parse_mode=ParseMode.HTML
            )
            return
        
        await callback.message.edit_text("üìä –ü–æ–ª—É—á–∞—é –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
        
        # Get player details
        player = await faceit_api.get_player_by_id(user.faceit_player_id)
        
        if not player:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            return
        
        # Format stats
        stats_text = MessageFormatter.format_player_info(player)
        
        await callback.message.edit_text(stats_text, parse_mode=ParseMode.HTML)
        logger.info(f"Stats shown for user {user_id}")
        
    except Exception as e:
        logger.error(f"Error in stats callback: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@router.callback_query(F.data == "help")
async def callback_help(callback: CallbackQuery):
    """Handle help callback."""
    await callback.answer()
    
    help_text = """ü§ñ <b>FACEIT Telegram Bot</b>

<b>üöÄ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫
/profile –Ω–∏–∫–Ω–µ–π–º - –ü—Ä–æ—Ñ–∏–ª—å –ª—é–±–æ–≥–æ –∏–≥—Ä–æ–∫–∞
/link –Ω–∏–∫–Ω–µ–π–º - –ü—Ä–∏–≤—è–∑–∞—Ç—å FACEIT –∞–∫–∫–∞—É–Ω—Ç
/stats - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–ø–æ—Å–ª–µ –ø—Ä–∏–≤—è–∑–∫–∏)
/help - –ü–æ–¥—Ä–æ–±–Ω–∞—è –ø–æ–º–æ—â—å

<b>‚ö° –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫:</b>
‚Ä¢ –ü–æ—Å–ª–µ /start –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º
‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üîç –ù–∞–π—Ç–∏ –∏–≥—Ä–æ–∫–∞"

<b>üîó –ü—Ä–∏–≤—è–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞:</b>
‚Ä¢ –ù–∞–π–¥–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–∏–≤—è–∑–∫–∏
‚Ä¢ –ü–æ—Å–ª–µ –ø—Ä–∏–≤—è–∑–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–Ω–æ–ø–∫–∞ "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"

<b>üí° –°–æ–≤–µ—Ç—ã:</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
‚Ä¢ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã"""
    
    await callback.message.edit_text(
        help_text,
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –∏–≥—Ä–æ–∫–∞", callback_data="search_another")],
            [InlineKeyboardButton(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats")]
        ])
    )


@router.message()
async def handle_messages(message: Message):
    """Handle all other messages."""
    text = message.text
    
    if not text:
        return
    
    # Check if message contains FACEIT match URL
    if "faceit.com" in text and "/room/" in text:
        await message.answer(
            "üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ç—á FACEIT!\n\n"
            "üöß <b>–ê–Ω–∞–ª–∏–∑ –º–∞—Ç—á–µ–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n"
            "–§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=ParseMode.HTML
        )
        return
    
    # Default response for unrecognized messages
    await message.answer(
        "ü§î –Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é.\n\n"
        "üí° <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:</b>\n"
        "‚Ä¢ –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ\n"
        "‚Ä¢ /help - –ø–æ–¥—Ä–æ–±–Ω–∞—è –ø–æ–º–æ—â—å\n"
        "‚Ä¢ /profile –Ω–∏–∫–Ω–µ–π–º - –ø–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ç—á FACEIT –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.",
        parse_mode=ParseMode.HTML,
        reply_markup=get_main_menu()
    )


async def main():
    """Main function."""
    try:
        # Validate settings
        logger.info("Validating settings...")
        validate_settings()
        
        # Create bot instance
        logger.info("Creating bot instance...")
        default_properties = DefaultBotProperties(parse_mode=ParseMode.HTML)
        bot = Bot(token=settings.telegram_bot_token, default=default_properties)
        
        # Create dispatcher with FSM storage
        dp = Dispatcher(storage=MemoryStorage())
        dp.include_router(router)
        
        # Test bot token
        me = await bot.get_me()
        logger.info(f"Bot @{me.username} started successfully!")
        logger.info(f"Bot ID: {me.id}")
        logger.info(f"Bot Name: {me.first_name}")
        
        # Start polling
        logger.info("Starting polling...")
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"Error starting bot: {e}")
        raise
    finally:
        logger.info("Bot stopped")


if __name__ == "__main__":
    asyncio.run(main())