"""Bot command handlers."""

import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, CommandStart
from aiogram.enums import ParseMode

from faceit.api import FaceitAPI, FaceitAPIError
from utils.storage import storage, UserData
from utils.formatter import MessageFormatter
from utils.admin import AdminManager
from utils.match_analyzer import MatchAnalyzer, format_match_analysis
from queues.task_manager import get_task_manager, TaskPriority
from bot.queue_handlers import handle_background_task_request
from bot.progress import send_progress_message, create_progress_keyboard
from utils.cache import get_cache_stats, clear_all_caches
from config.version import get_version, get_build_info
from utils.cs2_advanced_formatter import format_cs2_advanced_stats, format_weapon_stats, format_map_specific_progress
from utils.formatter_addon import format_player_playstyle

logger = logging.getLogger(__name__)

router = Router()
faceit_api = FaceitAPI()


# Global match analyzer
match_analyzer = MatchAnalyzer(faceit_api)

# Global task manager
task_manager = get_task_manager()


def get_main_menu():
    """Get main menu keyboard."""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="üéÆ –ü–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ç—á")],
            [KeyboardButton(text="üìã –ò—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π"), KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")],
            [KeyboardButton(text="üìà –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º—ã"), KeyboardButton(text="üîç –ù–∞–π—Ç–∏ –∏–≥—Ä–æ–∫–∞")],
            [KeyboardButton(text="‚öîÔ∏è –ê–Ω–∞–ª–∏–∑ –º–∞—Ç—á–∞"), KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard


def get_stats_menu():
    """Get statistics menu with subdivisions."""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats_general"),
            InlineKeyboardButton(text="üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats_detailed")
        ],
        [
            InlineKeyboardButton(text="üó∫Ô∏è –ö–∞—Ä—Ç—ã", callback_data="stats_maps"),
            InlineKeyboardButton(text="üî´ –û—Ä—É–∂–∏–µ", callback_data="stats_weapons")
        ],
        [
            InlineKeyboardButton(text="üéÆ –ú–∞—Ç—á–∏ (10)", callback_data="stats_10"),
            InlineKeyboardButton(text="üî• –ú–∞—Ç—á–∏ (30)", callback_data="stats_30")
        ],
        [
            InlineKeyboardButton(text="üìÖ –ú–∞—Ç—á–∏ (60)", callback_data="stats_60"),
            InlineKeyboardButton(text="üé™ –°–µ—Å—Å–∏–∏", callback_data="stats_sessions")
        ],
        [
            InlineKeyboardButton(text="üéØ –°—Ç–∏–ª—å –∏–≥—Ä—ã", callback_data="stats_playstyle")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]
    ])
    return keyboard

def get_analysis_menu():
    """Get analysis period selection menu."""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìä 20 –º–∞—Ç—á–µ–π", callback_data="analysis_10"),
                InlineKeyboardButton(text="üìà 60 –º–∞—Ç—á–µ–π", callback_data="analysis_30")
            ],
            [
                InlineKeyboardButton(text="üìâ 100 –º–∞—Ç—á–µ–π", callback_data="analysis_60"), 
                InlineKeyboardButton(text="üéÆ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ—Å—Å–∏—è–º", callback_data="sessions_analysis")
            ],
            [
                InlineKeyboardButton(text="üó∫ –ê–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç", callback_data="maps_analysis"),
                InlineKeyboardButton(text="‚ö° –ë—ã—Å—Ç—Ä—ã–π –æ–±–∑–æ—Ä", callback_data="today_summary")
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
    )
    return keyboard


@router.message(CommandStart())
async def cmd_start(message: Message) -> None:
    """Handle /start command."""
    # Check if user already has account linked
    user = await storage.get_user(message.from_user.id)
    
    if user and user.faceit_player_id:
        # User already linked, show main menu
        welcome_text = f"""
<b>üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!</b>

–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: <b>{user.faceit_nickname}</b>

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç—á–µ–π.
"""
        await message.answer(welcome_text, parse_mode=ParseMode.HTML, reply_markup=get_main_menu())
    else:
        # New user, ask for nickname
        welcome_text = """
<b>üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FACEIT Stats Bot!</b>

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∞—à–∏—Ö –º–∞—Ç—á–µ–π –≤ CS2 –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ FACEIT.

<b>–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º –≤ FACEIT:</b>
"""
        
        # Set user state to waiting for nickname
        if not user:
            user = UserData(user_id=message.from_user.id)
        user.waiting_for_nickname = True
        await storage.save_user(user)
        
        await message.answer(welcome_text, parse_mode=ParseMode.HTML)


@router.message(F.text == "üîç –ù–∞–π—Ç–∏ –∏–≥—Ä–æ–∫–∞")
async def menu_find_player(message: Message) -> None:
    """Handle find player menu."""
    user = await storage.get_user(message.from_user.id)
    
    # Set user state to waiting for nickname
    if not user:
        user = UserData(user_id=message.from_user.id)
    user.waiting_for_nickname = True
    await storage.save_user(user)
    
    await message.answer(
        "üîç <b>–ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞</b>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –∏–≥—Ä–æ–∫–∞ –≤ FACEIT –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É:\n\n–ü—Ä–∏–º–µ—Ä: <code>s1mple</code>",
        parse_mode=ParseMode.HTML
    )


@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def menu_profile(message: Message) -> None:
    """Handle profile menu."""
    await cmd_profile(message)


@router.message(F.text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def menu_stats(message: Message) -> None:
    """Handle stats menu."""
    await cmd_stats(message)


@router.message(F.text == "üéÆ –ü–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ç—á")
async def menu_last_match(message: Message) -> None:
    """Handle last match menu."""
    await cmd_last_match(message)


@router.message(F.text == "üìã –ò—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π")
async def menu_matches(message: Message) -> None:
    """Handle matches history menu."""
    await cmd_matches(message)


@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def menu_help(message: Message) -> None:
    """Handle help menu."""
    await cmd_help(message)


@router.message(F.text == "üìà –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º—ã")
async def menu_analysis(message: Message) -> None:
    """Handle analysis menu."""
    user = await storage.get_user(message.from_user.id)
    if not user or not user.faceit_player_id:
        await message.answer(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–π FACEIT –∞–∫–∫–∞—É–Ω—Ç –∫–æ–º–∞–Ω–¥–æ–π /setplayer\n\n–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"üîç –ù–∞–π—Ç–∏ –∏–≥—Ä–æ–∫–∞\" –≤ –º–µ–Ω—é.",
            parse_mode=ParseMode.HTML,
            reply_markup=get_main_menu()
        )
        return
    
    await message.answer(
        "üìà <b>–ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
        parse_mode=ParseMode.HTML,
        reply_markup=get_analysis_menu()
    )


@router.message(F.text == "‚öîÔ∏è –ê–Ω–∞–ª–∏–∑ –º–∞—Ç—á–∞")
async def menu_match_analysis(message: Message) -> None:
    """Handle match analysis menu."""
    await message.answer(
        "‚öîÔ∏è <b>–ê–Ω–∞–ª–∏–∑ –º–∞—Ç—á–∞ –ø–µ—Ä–µ–¥ –∏–≥—Ä–æ–π</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ç—á FACEIT –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤:\n\n"
        "üìã <b>–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:</b>\n"
        "‚Ä¢ üíÄ –ê–Ω–∞–ª–∏–∑ –æ–ø–∞—Å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤\n"
        "‚Ä¢ üéØ –°–ª–∞–±—ã–µ –º–µ—Å—Ç–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤\n"
        "‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Ñ–æ—Ä–º–∞ –∏–≥—Ä–æ–∫–æ–≤\n"
        "‚Ä¢ üí° –¢–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
        "‚Ä¢ ‚ö° –ê–Ω–∞–ª–∏–∑ —Ä–æ–ª–µ–π (AWP/Rifle/Support)\n\n"
        "–ü—Ä–∏–º–µ—Ä —Å—Å—ã–ª–∫–∏:\n"
        "<code>https://www.faceit.com/en/cs2/room/1-abc-def-ghi</code>\n\n"
        "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: <code>/analyze [—Å—Å—ã–ª–∫–∞]</code>",
        parse_mode=ParseMode.HTML,
        reply_markup=get_main_menu()
    )




@router.message(Command("setplayer"))
async def cmd_set_player(message: Message) -> None:
    """Handle /setplayer command."""
    if not message.text:
        return
        
    args = message.text.split()[1:]
    if not args:
        await message.answer(
            "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–∏–º –≤ FACEIT.\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/setplayer YourNickname</code>",
            parse_mode=ParseMode.HTML
        )
        return
    
    nickname = " ".join(args).strip()
    await message.answer(f"üîç –ò—â—É –∏–≥—Ä–æ–∫–∞ {nickname}...", parse_mode=ParseMode.HTML)
    
    try:
        player = await faceit_api.search_player(nickname)
        if not player:
            await message.answer(
                f"‚ùå –ò–≥—Ä–æ–∫ —Å –Ω–∏–∫–Ω–µ–π–º–æ–º \"{nickname}\" –Ω–µ –Ω–∞–π–¥–µ–Ω. "
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.",
                parse_mode=ParseMode.HTML
            )
            return
        
        user_data = UserData(
            user_id=message.from_user.id,
            faceit_player_id=player.player_id,
            faceit_nickname=player.nickname
        )
        await storage.save_user(user_data)
        
        player_info = MessageFormatter.format_player_info(player, None, None)
        success_text = f"‚úÖ –ò–≥—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!\n\n{player_info}"
        
        await message.answer(success_text, parse_mode=ParseMode.HTML, reply_markup=get_main_menu())
        logger.info(f"User {message.from_user.id} linked player {player.nickname}")
        
    except FaceitAPIError as e:
        logger.error(f"FACEIT API error in set_player: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–≥—Ä–æ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        logger.error(f"Unexpected error in set_player: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.",
            parse_mode=ParseMode.HTML
        )


# Handle text that looks like a nickname (for when user just types nickname)
@router.message(F.text.regexp(r'^[a-zA-Z0-9_-]{3,16}$'))
async def handle_nickname_input(message: Message) -> None:
    """Handle nickname input without command."""
    user = await storage.get_user(message.from_user.id)
    
    # Check if user is waiting for nickname or doesn't have linked account
    if (user and user.waiting_for_nickname) or (not user or not user.faceit_player_id):
        nickname = message.text.strip()
        await message.answer(f"üîç –ò—â—É –∏–≥—Ä–æ–∫–∞ {nickname}...", parse_mode=ParseMode.HTML)
        
        try:
            player = await faceit_api.search_player(nickname)
            if not player:
                await message.answer(
                    f"‚ùå –ò–≥—Ä–æ–∫ —Å –Ω–∏–∫–Ω–µ–π–º–æ–º \"{nickname}\" –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                    f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ\n"
                    f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É: <code>/setplayer {nickname}</code>",
                    parse_mode=ParseMode.HTML
                )
                return
            
            # Create or update user data
            if not user:
                user = UserData(user_id=message.from_user.id)
            
            user.faceit_player_id = player.player_id
            user.faceit_nickname = player.nickname
            user.waiting_for_nickname = False
            await storage.save_user(user)
            
            player_info = MessageFormatter.format_player_info(player, None, None)
            success_text = f"‚úÖ –ò–≥—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!\n\n{player_info}"
            
            await message.answer(success_text, parse_mode=ParseMode.HTML, reply_markup=get_main_menu())
            logger.info(f"User {message.from_user.id} linked player {player.nickname}")
            
        except FaceitAPIError as e:
            logger.error(f"FACEIT API error in nickname_input: {e}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–≥—Ä–æ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode=ParseMode.HTML
            )


@router.message(Command("lastmatch"))
async def cmd_last_match(message: Message) -> None:
    """Handle /lastmatch command."""
    user = await storage.get_user(message.from_user.id)
    if not user or not user.faceit_player_id:
        await message.answer(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–π FACEIT –∞–∫–∫–∞—É–Ω—Ç –∫–æ–º–∞–Ω–¥–æ–π /setplayer\n\n–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"üîç –ù–∞–π—Ç–∏ –∏–≥—Ä–æ–∫–∞\" –≤ –º–µ–Ω—é.",
            parse_mode=ParseMode.HTML,
            reply_markup=get_main_menu()
        )
        return
    
    await message.answer(
        "üîç –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –º–∞—Ç—á–µ...",
        parse_mode=ParseMode.HTML
    )
    
    try:
        matches = await faceit_api.get_player_matches(user.faceit_player_id, limit=1)
        if not matches:
            await message.answer(
                "‚ùå –ú–∞—Ç—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                parse_mode=ParseMode.HTML
            )
            return
        
        match = matches[0]
        logger.info(f"Match status: '{match.status}' for match {match.match_id}")
        if match.status.upper() != "FINISHED":
            await message.answer(
                f"‚è≥ –ü–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ç—á –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω (—Å—Ç–∞—Ç—É—Å: {match.status}).",
                parse_mode=ParseMode.HTML
            )
            return
        
        stats = await faceit_api.get_match_stats(match.match_id)
        formatted_message = MessageFormatter.format_match_result(
            match, stats, user.faceit_player_id
        )
        
        await message.answer(formatted_message, parse_mode=ParseMode.HTML)
        logger.info(f"Sent last match info to user {message.from_user.id}")
        
    except FaceitAPIError as e:
        logger.error(f"FACEIT API error in last_match: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–∞.",
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        logger.error(f"Unexpected error in last_match: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.",
            parse_mode=ParseMode.HTML
        )


@router.message(Command("matches"))
async def cmd_matches(message: Message) -> None:
    """Handle /matches command."""
    user = await storage.get_user(message.from_user.id)
    if not user or not user.faceit_player_id:
        await message.answer(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–π FACEIT –∞–∫–∫–∞—É–Ω—Ç –∫–æ–º–∞–Ω–¥–æ–π /setplayer\n\n–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"üîç –ù–∞–π—Ç–∏ –∏–≥—Ä–æ–∫–∞\" –≤ –º–µ–Ω—é.",
            parse_mode=ParseMode.HTML,
            reply_markup=get_main_menu()
        )
        return
    
    # Parse limit from command
    limit = 5
    if message.text:
        args = message.text.split()[1:]
        if args and args[0].isdigit():
            limit = min(int(args[0]), 20)
    
    await message.answer(
        f"üîç –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö {limit} –º–∞—Ç—á–∞—Ö...",
        parse_mode=ParseMode.HTML
    )
    
    try:
        matches = await faceit_api.get_player_matches(user.faceit_player_id, limit=limit)
        finished_matches = [match for match in matches if match.status.upper() == "FINISHED"]
        
        if not finished_matches:
            await message.answer(
                "‚ùå –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –º–∞—Ç—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                parse_mode=ParseMode.HTML
            )
            return
        
        formatted_message = MessageFormatter.format_matches_list(
            finished_matches, user.faceit_player_id
        )
        
        await message.answer(formatted_message, parse_mode=ParseMode.HTML)
        logger.info(f"Sent matches list to user {message.from_user.id}")
        
    except FaceitAPIError as e:
        logger.error(f"FACEIT API error in matches: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π.",
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        logger.error(f"Unexpected error in matches: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.",
            parse_mode=ParseMode.HTML
        )


@router.message(Command("profile"))
async def cmd_profile(message: Message) -> None:
    """Handle /profile command."""
    user = await storage.get_user(message.from_user.id)
    if not user or not user.faceit_player_id:
        await message.answer(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–π FACEIT –∞–∫–∫–∞—É–Ω—Ç –∫–æ–º–∞–Ω–¥–æ–π /setplayer\n\n–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"üîç –ù–∞–π—Ç–∏ –∏–≥—Ä–æ–∫–∞\" –≤ –º–µ–Ω—é.",
            parse_mode=ParseMode.HTML,
            reply_markup=get_main_menu()
        )
        return
    
    await message.answer(
        "üîç –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ...",
        parse_mode=ParseMode.HTML
    )
    
    try:
        player = await faceit_api.get_player_by_id(user.faceit_player_id)
        if not player:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ.",
                parse_mode=ParseMode.HTML
            )
            return
        
        # Get player statistics and recent matches for streaks calculation
        player_stats = await faceit_api.get_player_stats(user.faceit_player_id)
        recent_matches = await faceit_api.get_player_matches(user.faceit_player_id, limit=100)
        
        formatted_message = MessageFormatter.format_player_info(player, player_stats, recent_matches)
        await message.answer(formatted_message, parse_mode=ParseMode.HTML)
        logger.info(f"Sent profile info to user {message.from_user.id}")
        
    except FaceitAPIError as e:
        logger.error(f"FACEIT API error in profile: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ñ–∏–ª–µ.",
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        logger.error(f"Unexpected error in profile: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.",
            parse_mode=ParseMode.HTML
        )


@router.message(Command("stats"))
async def cmd_stats(message: Message) -> None:
    """Handle /stats command - show statistics menu."""
    user = await storage.get_user(message.from_user.id)
    if not user or not user.faceit_player_id:
        await message.answer(
            "‚ùå <b>–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /setplayer –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"üîç –ù–∞–π—Ç–∏ –∏–≥—Ä–æ–∫–∞\"",
            parse_mode=ParseMode.HTML,
            reply_markup=get_main_menu()
        )
        return
    
    await message.answer(
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞ {user.faceit_nickname}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        parse_mode=ParseMode.HTML,
        reply_markup=get_stats_menu()
    )


@router.message(Command("help"))
async def cmd_help(message: Message) -> None:
    """Handle /help command."""
    help_text = """
<b>üéÆ FACEIT Stats Bot - –°–ø—Ä–∞–≤–∫–∞</b>

<b>üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/setplayer &lt;nickname&gt; - –ø—Ä–∏–≤—è–∑–∞—Ç—å FACEIT –∞–∫–∫–∞—É–Ω—Ç  
/profile - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ + –±–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/stats - –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞
/lastmatch - –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ç—á —Å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏
/matches [—á–∏—Å–ª–æ] - —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∞—Ç—á–µ–π (–º–∞–∫—Å. 20)
/analyze &lt;—Å—Å—ã–ª–∫–∞&gt; - –∞–Ω–∞–ª–∏–∑ –º–∞—Ç—á–∞ –ø–µ—Ä–µ–¥ –∏–≥—Ä–æ–π
/today - –±—ã—Å—Ç—Ä—ã–π –æ–±–∑–æ—Ä –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏
/my_tasks - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∞–Ω–∞–ª–∏–∑–∞
/cancel_task &lt;id&gt; - –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É
/version - –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

<b>üíé –ü–æ–¥–ø–∏—Å–∫–∏ –∏ –ª–∏–º–∏—Ç—ã:</b>

<b>üÜì FREE (–±–µ—Å–ø–ª–∞—Ç–Ω–æ):</b>
‚Ä¢ 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –¥–æ 20 –º–∞—Ç—á–µ–π
‚Ä¢ –ë–∞–∑–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

<b>‚≠ê PREMIUM (199 ‚≠ê/–º–µ—Å):</b>
‚Ä¢ 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –¥–æ 50 –º–∞—Ç—á–µ–π
‚Ä¢ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚Ä¢ API –¥–æ—Å—Ç—É–ø

<b>üöÄ PRO (299 ‚≠ê/–º–µ—Å):</b>
‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –¥–æ 200 –º–∞—Ç—á–µ–π
‚Ä¢ –ü–æ–ª–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

<b>‚ö° –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:</b>
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤ CS2
‚Ä¢ –ü—Ä–µ–¥–º–∞—Ç—á–µ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç –∏ —Å—Ç–∏–ª—è –∏–≥—Ä—ã
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
‚Ä¢ –§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤

<b>üí° –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>
<code>/setplayer s1mple</code>
<code>/stats</code> - –ø–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
<code>/matches 10</code> - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∞—Ç—á–µ–π
<code>/analyze https://faceit.com/en/cs2/room/1-abc-def</code>

–¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∏–∫–Ω–µ–π–º –∏–≥—Ä–æ–∫–∞ –∏–ª–∏ –≤—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ç—á FACEIT –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.

<b>üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏:</b>
‚Ä¢ /my_tasks - –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∞–Ω–∞–ª–∏–∑–∞
‚Ä¢ –ö–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
‚Ä¢ /cancel_task &lt;id&gt; - –æ—Ç–º–µ–Ω–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É

<b>üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.
"""
    
    # Create help keyboard with back button
    help_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
    )
    
    await message.answer(help_text, parse_mode=ParseMode.HTML, reply_markup=help_keyboard)


@router.message(Command("version"))
async def cmd_version(message: Message) -> None:
    """Handle /version command."""
    build_info = get_build_info()
    version = get_version()
    
    version_text = f"""
<b>ü§ñ {build_info['name']}</b>

<b>üì¶ –í–µ—Ä—Å–∏—è:</b> <code>{version}</code>
<b>üìù –û–ø–∏—Å–∞–Ω–∏–µ:</b> {build_info['description']}
<b>üë®‚Äçüíª –ê–≤—Ç–æ—Ä:</b> {build_info['author']}

<b>üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ <b>Python:</b> {build_info['python_version']}
‚Ä¢ <b>Docker:</b> {'‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' if build_info['docker_ready'] else '‚ùå –ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'}
‚Ä¢ <b>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:</b> –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–∞—è
‚Ä¢ <b>API:</b> FACEIT Data API v4

<b>‚ö° –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤ CS2
‚Ä¢ –ü—Ä–µ–¥–º–∞—Ç—á–µ–≤—ã–π –∞–Ω–∞–ª–∏–∑
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–∞—Ç—á–µ–π
‚Ä¢ –ü–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

<b>üèóÔ∏è –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:</b>
‚Ä¢ Bot Engine: aiogram 3.x
‚Ä¢ Cache System: Multi-level caching
‚Ä¢ Analytics: HLTV 2.1 Rating
‚Ä¢ Performance: 4x faster analysis

<i>üöÄ –ì–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!</i>
"""
    
    await message.answer(version_text, parse_mode=ParseMode.HTML, reply_markup=get_main_menu())




@router.message(Command("analyze"))
async def cmd_analyze(message: Message) -> None:
    """Handle /analyze command."""
    if not message.text:
        await message.answer(
            "‚öîÔ∏è <b>–ê–Ω–∞–ª–∏–∑ –º–∞—Ç—á–∞</b>\n\n"
            "–£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ç—á FACEIT:\n"
            "<code>/analyze https://www.faceit.com/en/cs2/room/1-abc-def-ghi</code>",
            parse_mode=ParseMode.HTML
        )
        return
        
    args = message.text.split()[1:]
    if not args:
        await message.answer(
            "‚öîÔ∏è <b>–ê–Ω–∞–ª–∏–∑ –º–∞—Ç—á–∞</b>\n\n"
            "–£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ç—á FACEIT:\n"
            "<code>/analyze https://www.faceit.com/en/cs2/room/1-abc-def-ghi</code>",
            parse_mode=ParseMode.HTML
        )
        return
    
    match_url = args[0]
    await analyze_match_from_url(message, match_url)


async def analyze_match_from_url(message: Message, match_url: str) -> None:
    """Analyze match from URL."""
    await message.answer(
        "üîç <b>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –º–∞—Ç—á...</b>\n\n"
        "‚è≥ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...",
        parse_mode=ParseMode.HTML
    )
    
    try:
        # Analyze the match
        analysis_result = await match_analyzer.analyze_match(match_url)
        
        # Format and send result
        formatted_message = format_match_analysis(analysis_result)
        
        # Split long message if needed
        if len(formatted_message) > 4096:
            # Split into multiple messages
            parts = []
            current_part = ""
            lines = formatted_message.split('\n')
            
            for line in lines:
                if len(current_part + line + '\n') > 4000:
                    if current_part:
                        parts.append(current_part.strip())
                        current_part = line + '\n'
                    else:
                        parts.append(line)
                else:
                    current_part += line + '\n'
            
            if current_part:
                parts.append(current_part.strip())
            
            # Send all parts
            for i, part in enumerate(parts):
                if i == 0:
                    await message.answer(part, parse_mode=ParseMode.HTML)
                else:
                    await message.answer(
                        f"<b>–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞...</b>\n\n{part}",
                        parse_mode=ParseMode.HTML
                    )
        else:
            await message.answer(formatted_message, parse_mode=ParseMode.HTML)
        
        logger.info(f"Match analysis completed for user {message.from_user.id}")
        
    except Exception as e:
        logger.error(f"Error in match analysis: {e}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –º–∞—Ç—á–∞</b>\n\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "‚Ä¢ –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ç—á\n"
            "‚Ä¢ –ú–∞—Ç—á —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω\n"
            "‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å API FACEIT\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode=ParseMode.HTML
        )


@router.message(Command("today"))
async def cmd_today(message: Message) -> None:
    """Handle /today command for quick daily overview."""
    user = await storage.get_user(message.from_user.id)
    if not user or not user.faceit_player_id:
        await message.answer(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–π FACEIT –∞–∫–∫–∞—É–Ω—Ç –∫–æ–º–∞–Ω–¥–æ–π /setplayer\n\n–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"üîç –ù–∞–π—Ç–∏ –∏–≥—Ä–æ–∫–∞\" –≤ –º–µ–Ω—é.",
            parse_mode=ParseMode.HTML,
            reply_markup=get_main_menu()
        )
        return
    
    await message.answer(
        "‚ö° –ü–æ–ª—É—á–∞—é –±—ã—Å—Ç—Ä—ã–π –æ–±–∑–æ—Ä –∑–∞ —Å–µ–≥–æ–¥–Ω—è...",
        parse_mode=ParseMode.HTML
    )
    
    try:
        player = await faceit_api.get_player_by_id(user.faceit_player_id)
        
        # Get recent matches (last 20 for quick overview)
        matches = await faceit_api.get_player_matches(user.faceit_player_id, limit=50)
        finished_matches = [m for m in matches if m.status.upper() == "FINISHED"]
        
        if not finished_matches:
            await message.answer(
                "üìä –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                parse_mode=ParseMode.HTML
            )
            return
        
        # Quick stats calculation
        wins = len([m for m in finished_matches if MessageFormatter._get_player_faction(m, player.player_id) == m.results.winner])
        total = len(finished_matches)
        win_rate = round((wins / total) * 100, 1) if total > 0 else 0
        
        # Recent form
        recent_results = []
        for match in finished_matches:
            is_win = MessageFormatter._get_player_faction(match, player.player_id) == match.results.winner
            recent_results.append("üü¢" if is_win else "üî¥")
        
        message_text = f"‚ö° <b>–ë—ã—Å—Ç—Ä—ã–π –æ–±–∑–æ—Ä: {player.nickname}</b>\n\n"
        message_text += f"üéÆ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ {total} –º–∞—Ç—á–µ–π:</b>\n"
        message_text += f"üèÜ <b>–í–∏–Ω—Ä–µ–π—Ç:</b> {win_rate}% ({wins}/{total})\n"
        message_text += f"üìä <b>–§–æ—Ä–º–∞:</b> {' '.join(recent_results)}\n\n"
        message_text += f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"
        
        await message.answer(message_text, parse_mode=ParseMode.HTML, reply_markup=get_main_menu())
        logger.info(f"Sent today overview to user {message.from_user.id}")
        
    except FaceitAPIError as e:
        logger.error(f"FACEIT API error in today: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.",
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        logger.error(f"Unexpected error in today: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.",
            parse_mode=ParseMode.HTML
        )


# Task management callback handlers
@router.callback_query(F.data.startswith("task_status:"))
async def handle_task_status_callback(callback: CallbackQuery) -> None:
    """Handle task status check callback."""
    from bot.queue_handlers import handle_task_status_check
    await handle_task_status_check(callback)


@router.callback_query(F.data.startswith("task_cancel:"))
async def handle_task_cancel_callback(callback: CallbackQuery) -> None:
    """Handle task cancellation callback."""
    from bot.queue_handlers import handle_task_cancellation
    await handle_task_cancellation(callback)


# Handle callback queries from inline buttons
@router.callback_query(F.data.startswith("analysis_"))
async def handle_analysis_callback(callback: CallbackQuery) -> None:
    """Handle analysis period callback."""
    await callback.answer()
    
    user = await storage.get_user(callback.from_user.id)
    if not user or not user.faceit_player_id:
        await callback.message.edit_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–π FACEIT –∞–∫–∫–∞—É–Ω—Ç –∫–æ–º–∞–Ω–¥–æ–π /setplayer",
            parse_mode=ParseMode.HTML
        )
        return
    
    period = callback.data.split("_")[1]
    
    if period == "all":
        await callback.message.edit_text("üîç –ü–æ–ª—É—á–∞—é –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º—ã...", parse_mode=ParseMode.HTML)
        
        try:
            player = await faceit_api.get_player_by_id(user.faceit_player_id)
            matches_10 = await faceit_api.get_player_matches(user.faceit_player_id, limit=100)
            matches_30 = await faceit_api.get_player_matches(user.faceit_player_id, limit=200) 
            matches_60 = await faceit_api.get_player_matches(user.faceit_player_id, limit=300)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Å –∫–ª–∞—Ç—á —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            formatted_message = await MessageFormatter.format_period_analysis_with_api(
                player, faceit_api, 50  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∑–∞ 50 –º–∞—Ç—á–µ–π —Å –∫–ª–∞—Ç—á —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            )
            await callback.message.edit_text(formatted_message, parse_mode=ParseMode.HTML)
            
        except Exception as e:
            logger.error(f"Error in analysis callback: {e}")
            await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞.", parse_mode=ParseMode.HTML)
    else:
        limit = int(period)
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª—å—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏
        actual_limit = min(limit * 2, 100)  # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ, –Ω–æ –Ω–µ –±–æ–ª–µ–µ 100
        await callback.message.edit_text(f"üîç –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {actual_limit} –º–∞—Ç—á–µ–π...", parse_mode=ParseMode.HTML)
        
        try:
            player = await faceit_api.get_player_by_id(user.faceit_player_id)
            
            # Use new API-based analysis with real HLTV rating calculation
            formatted_message = await MessageFormatter.format_period_analysis_with_api(
                player, faceit_api, actual_limit
            )
            
            await callback.message.edit_text(formatted_message, parse_mode=ParseMode.HTML)
            
        except Exception as e:
            logger.error(f"Error in analysis callback: {e}")
            await callback.message.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}", parse_mode=ParseMode.HTML)


@router.callback_query(F.data == "maps_analysis")
async def handle_maps_analysis(callback: CallbackQuery) -> None:
    """Handle maps analysis callback."""
    await callback.answer()
    
    user = await storage.get_user(callback.from_user.id)
    if not user or not user.faceit_player_id:
        await callback.message.edit_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–π FACEIT –∞–∫–∫–∞—É–Ω—Ç –∫–æ–º–∞–Ω–¥–æ–π /setplayer",
            parse_mode=ParseMode.HTML
        )
        return
    
    await callback.message.edit_text("üó∫ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –∫–∞—Ä—Ç—ã...", parse_mode=ParseMode.HTML)
    
    try:
        player = await faceit_api.get_player_by_id(user.faceit_player_id)
        
        formatted_message = await MessageFormatter.format_map_analysis(
            player, faceit_api, limit=200
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∞–Ω–∞–ª–∏–∑—É", callback_data="analysis_menu")]
        ])
        
        await callback.message.edit_text(formatted_message, parse_mode=ParseMode.HTML, reply_markup=back_keyboard)
        
    except Exception as e:
        logger.error(f"Error in maps analysis callback: {e}")
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∞–Ω–∞–ª–∏–∑—É", callback_data="analysis_menu")]
        ])
        await callback.message.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞—Ä—Ç: {str(e)}", 
            parse_mode=ParseMode.HTML,
            reply_markup=back_keyboard
        )


@router.callback_query(F.data == "today_summary")
async def handle_today_summary(callback: CallbackQuery) -> None:
    """Handle today summary callback."""
    await callback.answer()
    
    user = await storage.get_user(callback.from_user.id)
    if not user or not user.faceit_player_id:
        await callback.message.edit_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–π FACEIT –∞–∫–∫–∞—É–Ω—Ç –∫–æ–º–∞–Ω–¥–æ–π /setplayer",
            parse_mode=ParseMode.HTML
        )
        return
    
    await callback.message.edit_text("‚ö° –ü–æ–ª—É—á–∞—é –±—ã—Å—Ç—Ä—ã–π –æ–±–∑–æ—Ä...", parse_mode=ParseMode.HTML)
    
    try:
        player = await faceit_api.get_player_by_id(user.faceit_player_id)
        
        # Get recent matches for summary
        matches_with_stats = await faceit_api.get_matches_with_stats(user.faceit_player_id, limit=100)
        
        if not matches_with_stats:
            await callback.message.edit_text("‚ùå –ú–∞—Ç—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", parse_mode=ParseMode.HTML)
            return
        
        # Calculate summary stats
        current_stats = MessageFormatter._calculate_match_stats_from_api(matches_with_stats, user.faceit_player_id)
        
        if not current_stats:
            await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", parse_mode=ParseMode.HTML)
            return
        
        # Recent form
        finished_matches = [m for m, s in matches_with_stats if m.status.upper() == "FINISHED"]
        recent_results = []
        for match in finished_matches[:5]:
            is_win = MessageFormatter._get_player_faction(match, player.player_id) == match.results.winner
            recent_results.append("üü¢" if is_win else "üî¥")
        
        message_text = f"‚ö° <b>–ë—ã—Å—Ç—Ä—ã–π –æ–±–∑–æ—Ä: {player.nickname}</b>\n\n"
        message_text += f"üéÆ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ {current_stats['matches']} –º–∞—Ç—á–µ–π:</b>\n"
        message_text += f"üèÜ <b>–í–∏–Ω—Ä–µ–π—Ç:</b> {current_stats['win_rate']}% ({current_stats['wins']}/{current_stats['matches']})\n"
        message_text += f"‚öîÔ∏è <b>K/D:</b> {current_stats['kd_ratio']}\n"
        message_text += f"üí• <b>ADR:</b> {current_stats['adr']}\n"
        message_text += f"üìà <b>HLTV Rating:</b> {current_stats['hltv_rating']}\n"
        message_text += f"üé™ <b>KAST:</b> {current_stats['kast']}%\n"
        message_text += f"üî• <b>Clutch:</b> {current_stats['clutch_success']}% ({current_stats['clutch_attempts']})\n"
        message_text += f"üìä <b>–§–æ—Ä–º–∞:</b> {' '.join(recent_results)}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∞–Ω–∞–ª–∏–∑—É", callback_data="analysis_menu")]
        ])
        
        await callback.message.edit_text(message_text, parse_mode=ParseMode.HTML, reply_markup=back_keyboard)
        
    except Exception as e:
        logger.error(f"Error in today summary callback: {e}")
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∞–Ω–∞–ª–∏–∑—É", callback_data="analysis_menu")]
        ])
        await callback.message.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", 
            parse_mode=ParseMode.HTML,
            reply_markup=back_keyboard
        )


@router.callback_query(F.data == "sessions_analysis")
async def handle_sessions_analysis(callback: CallbackQuery) -> None:
    """Handle sessions analysis callback."""
    await callback.answer()
    
    user = await storage.get_user(callback.from_user.id)
    if not user or not user.faceit_player_id:
        await callback.message.edit_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–π FACEIT –∞–∫–∫–∞—É–Ω—Ç –∫–æ–º–∞–Ω–¥–æ–π /setplayer",
            parse_mode=ParseMode.HTML
        )
        return
    
    await callback.message.edit_text("üéÆ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –∏–≥—Ä–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏...", parse_mode=ParseMode.HTML)
    
    try:
        player = await faceit_api.get_player_by_id(user.faceit_player_id)
        
        formatted_message = await MessageFormatter.format_sessions_analysis(
            player, faceit_api, limit=200
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        back_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∞–Ω–∞–ª–∏–∑—É", callback_data="analysis_menu")]
            ]
        )
        
        await callback.message.edit_text(
            formatted_message, 
            parse_mode=ParseMode.HTML,
            reply_markup=back_keyboard
        )
        
    except Exception as e:
        logger.error(f"Error in sessions analysis callback: {e}")
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∞–Ω–∞–ª–∏–∑—É", callback_data="analysis_menu")]
        ])
        await callback.message.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–µ—Å—Å–∏–π: {str(e)}", 
            parse_mode=ParseMode.HTML,
            reply_markup=back_keyboard
        )


@router.callback_query(F.data == "analysis_menu")
async def handle_analysis_menu(callback: CallbackQuery) -> None:
    """Handle analysis menu callback."""
    await callback.answer()
    await callback.message.edit_text(
        "üìä <b>–ú–µ–Ω—é –∞–Ω–∞–ª–∏–∑–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:",
        parse_mode=ParseMode.HTML,
        reply_markup=get_analysis_menu()
    )

@router.callback_query(F.data == "back_to_menu")
async def handle_back_to_menu(callback: CallbackQuery) -> None:
    """Handle back to menu callback."""
    await callback.answer()
    await callback.message.delete()
    await callback.message.answer(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
        reply_markup=get_main_menu()
    )


@router.callback_query(F.data == "back_to_main")
async def handle_back_to_main(callback: CallbackQuery) -> None:
    """Handle back to main stats menu callback."""
    await callback.answer()
    await callback.message.edit_text(
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        parse_mode=ParseMode.HTML,
        reply_markup=get_stats_menu()
    )




# Administrative commands
@router.message(Command("admin_stats"))
async def cmd_admin_stats(message: Message) -> None:
    """Admin command: Get system statistics."""
    if not AdminManager.is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    try:
        stats = await AdminManager.get_system_stats()
        stats_message = AdminManager.format_stats_message(stats)
        await message.answer(stats_message, parse_mode=ParseMode.HTML)
    except Exception as e:
        logger.error(f"Error getting admin stats: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")




@router.message(Command("admin_user"))
async def cmd_admin_user(message: Message) -> None:
    """Admin command: Get user information."""
    if not AdminManager.is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    if not message.text:
        return
    
    args = message.text.split()[1:]
    if len(args) < 1:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_user <user_id>\n"
            "–ü—Ä–∏–º–µ—Ä: /admin_user 123456789",
            parse_mode=ParseMode.HTML
        )
        return
    
    try:
        user_id = int(args[0])
        user_info = await AdminManager.get_user_info(user_id)
        info_message = AdminManager.format_user_info(user_info)
        await message.answer(info_message, parse_mode=ParseMode.HTML)
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id")
    except Exception as e:
        logger.error(f"Error getting user info: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")




@router.message(Command("admin_cache"))
async def cmd_admin_cache(message: Message) -> None:
    """Admin command: Get cache statistics."""
    if not AdminManager.is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    try:
        cache_stats = await get_cache_stats()
        
        stats_message = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞</b>\n\n"
        
        # Player cache
        player_cache = cache_stats["player_cache"]
        stats_message += f"üë§ <b>Player Cache:</b>\n"
        stats_message += f"‚Ä¢ –†–∞–∑–º–µ—Ä: {player_cache['memory_usage']}\n"
        stats_message += f"‚Ä¢ Hit Rate: {player_cache['hit_rate']}%\n"
        stats_message += f"‚Ä¢ Hits/Misses: {player_cache['hits']}/{player_cache['misses']}\n\n"
        
        # Match cache
        match_cache = cache_stats["match_cache"]
        stats_message += f"‚öîÔ∏è <b>Match Cache:</b>\n"
        stats_message += f"‚Ä¢ –†–∞–∑–º–µ—Ä: {match_cache['memory_usage']}\n"
        stats_message += f"‚Ä¢ Hit Rate: {match_cache['hit_rate']}%\n"
        stats_message += f"‚Ä¢ Hits/Misses: {match_cache['hits']}/{match_cache['misses']}\n\n"
        
        # Stats cache
        stats_cache = cache_stats["stats_cache"]
        stats_message += f"üìà <b>Stats Cache:</b>\n"
        stats_message += f"‚Ä¢ –†–∞–∑–º–µ—Ä: {stats_cache['memory_usage']}\n"
        stats_message += f"‚Ä¢ Hit Rate: {stats_cache['hit_rate']}%\n"
        stats_message += f"‚Ä¢ Hits/Misses: {stats_cache['hits']}/{stats_cache['misses']}\n\n"
        
        stats_message += f"üíæ <b>–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä:</b> {cache_stats['total_entries']} –∑–∞–ø–∏—Å–µ–π"
        
        await message.answer(stats_message, parse_mode=ParseMode.HTML)
        
    except Exception as e:
        logger.error(f"Error getting cache stats: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞")


@router.message(Command("admin_cache_clear"))
async def cmd_admin_cache_clear(message: Message) -> None:
    """Admin command: Clear all caches."""
    if not AdminManager.is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    try:
        await clear_all_caches()
        await message.answer("‚úÖ –í—Å–µ –∫—ç—à–∏ –æ—á–∏—â–µ–Ω—ã")
        logger.info(f"Admin {message.from_user.id} cleared all caches")
        
    except Exception as e:
        logger.error(f"Error clearing caches: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–µ–π")


@router.message(Command("my_tasks"))
async def cmd_my_tasks(message: Message) -> None:
    """Show user's active tasks."""
    try:
        from bot.queue_handlers import get_user_active_tasks
        
        active_tasks = await get_user_active_tasks(message.from_user.id)
        
        if not active_tasks:
            await message.answer(
                "üìã <b>–í–∞—à–∏ –∑–∞–¥–∞—á–∏</b>\n\n"
                "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á",
                parse_mode=ParseMode.HTML
            )
            return
        
        tasks_message = "üìã <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:</b>\n\n"
        
        for task_info in active_tasks:
            task_id = task_info["task_id"]
            status = task_info["status"]
            
            task_status = status.get("status", "unknown")
            
            # Status emoji
            status_emoji = {
                "queued": "‚è≥",
                "started": "üîÑ",
                "finished": "‚úÖ",
                "failed": "‚ùå",
                "cancelled": "üö´"
            }.get(task_status, "‚ùì")
            
            tasks_message += f"{status_emoji} <code>{task_id[:12]}...</code>\n"
            tasks_message += f"üìä –°—Ç–∞—Ç—É—Å: {task_status}\n"
            
            # Add progress if available
            progress = status.get("progress", {})
            if progress:
                current_step = progress.get("current_step", 0)
                total_steps = progress.get("total_steps", 0)
                if total_steps > 0:
                    progress_pct = round((current_step / total_steps) * 100, 1)
                    tasks_message += f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_pct}%\n"
                    
                current_operation = progress.get("current_operation")
                if current_operation:
                    tasks_message += f"‚öôÔ∏è {current_operation}\n"
            
            tasks_message += "\n"
        
        await message.answer(tasks_message, parse_mode=ParseMode.HTML)
        
    except Exception as e:
        logger.error(f"Error getting user tasks: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á",
            parse_mode=ParseMode.HTML
        )


@router.message(Command("cancel_task"))
async def cmd_cancel_task(message: Message) -> None:
    """Cancel a user's task."""
    if not message.text:
        return
    
    args = message.text.split()[1:]
    if not args:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /cancel_task <task_id>\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /my_tasks —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏",
            parse_mode=ParseMode.HTML
        )
        return
    
    task_id = args[0]
    user_id = message.from_user.id
    
    try:
        from bot.queue_handlers import user_active_tasks
        
        # Check if task belongs to user
        user_tasks = user_active_tasks.get(user_id, [])
        if task_id not in user_tasks:
            await message.answer(
                "‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ä–µ–¥–∏ –≤–∞—à–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /my_tasks –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á",
                parse_mode=ParseMode.HTML
            )
            return
        
        # Cancel the task
        success = task_manager.cancel_task(task_id)
        
        if success:
            # Remove from user's active tasks
            user_active_tasks[user_id].remove(task_id)
            if not user_active_tasks[user_id]:
                del user_active_tasks[user_id]
            
            await message.answer(
                f"‚úÖ <b>–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
                f"üÜî ID: <code>{task_id}</code>",
                parse_mode=ParseMode.HTML
            )
        else:
            await message.answer(
                f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É</b>\n\n"
                f"üÜî ID: <code>{task_id}</code>\n"
                f"üí° –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–¥–∞—á–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                parse_mode=ParseMode.HTML
            )
        
    except Exception as e:
        logger.error(f"Error cancelling task {task_id}: {e}")
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–¥–∞—á–∏\n\n"
            f"üÜî ID: <code>{task_id}</code>",
            parse_mode=ParseMode.HTML
        )




async def _fallback_analyze_match(message: Message, match_url: str) -> None:
    """Fallback synchronous match analysis when queue system fails."""
    await message.answer(
        "üîç <b>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –º–∞—Ç—á...</b>\n\n"
        "‚è≥ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...",
        parse_mode=ParseMode.HTML
    )
    
    try:
        # Analyze the match
        analysis_result = await match_analyzer.analyze_match(match_url)
        
        # Format and send result
        formatted_message = format_match_analysis(analysis_result)
        
        # Split long message if needed
        if len(formatted_message) > 4096:
            # Split into multiple messages
            parts = []
            current_part = ""
            lines = formatted_message.split('\n')
            
            for line in lines:
                if len(current_part + line + '\n') > 4000:
                    if current_part:
                        parts.append(current_part.strip())
                        current_part = line + '\n'
                    else:
                        parts.append(line)
                else:
                    current_part += line + '\n'
            
            if current_part:
                parts.append(current_part.strip())
            
            # Send all parts
            for i, part in enumerate(parts):
                if i == 0:
                    await message.answer(part, parse_mode=ParseMode.HTML)
                else:
                    await message.answer(
                        f"<b>–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞...</b>\n\n{part}",
                        parse_mode=ParseMode.HTML
                    )
        else:
            await message.answer(formatted_message, parse_mode=ParseMode.HTML)
        
        logger.info(f"Match analysis completed for user {message.from_user.id}")
        
    except Exception as e:
        logger.error(f"Error in match analysis: {e}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –º–∞—Ç—á–∞</b>\n\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "‚Ä¢ –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ç—á\n"
            "‚Ä¢ –ú–∞—Ç—á —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω\n"
            "‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å API FACEIT\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode=ParseMode.HTML
        )




# Handle any other text
@router.message(F.text)
async def handle_text(message: Message) -> None:
    """Handle any other text input."""
    user = await storage.get_user(message.from_user.id)
    
    # Check if message contains FACEIT match URL
    if message.text and 'faceit.com' in message.text.lower() and '/room/' in message.text.lower():
        await analyze_match_from_url(message, message.text.strip())
        return
    
    # Check if user is waiting for nickname
    if user and user.waiting_for_nickname:
        nickname = message.text.strip()
        
        # Check if it looks like a valid nickname
        if len(nickname) < 3 or len(nickname) > 25:
            await message.answer(
                "‚ùå –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 3 –¥–æ 25 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                parse_mode=ParseMode.HTML
            )
            return
            
        await message.answer(f"üîç –ò—â—É –∏–≥—Ä–æ–∫–∞ {nickname}...", parse_mode=ParseMode.HTML)
        
        try:
            player = await faceit_api.search_player(nickname)
            if not player:
                await message.answer(
                    f"‚ùå –ò–≥—Ä–æ–∫ —Å –Ω–∏–∫–Ω–µ–π–º–æ–º \"{nickname}\" –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                    f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ\n"
                    f"‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º –∫–∞–∫ –æ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ FACEIT\n\n"
                    f"–ù–∞–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–∏–∫–Ω–µ–π–º:",
                    parse_mode=ParseMode.HTML
                )
                return
            
            user.faceit_player_id = player.player_id
            user.faceit_nickname = player.nickname
            user.waiting_for_nickname = False
            await storage.save_user(user)
            
            player_info = MessageFormatter.format_player_info(player, None, None)
            success_text = f"‚úÖ –ò–≥—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!\n\n{player_info}"
            
            await message.answer(success_text, parse_mode=ParseMode.HTML, reply_markup=get_main_menu())
            logger.info(f"User {message.from_user.id} linked player {player.nickname}")
            
        except FaceitAPIError as e:
            logger.error(f"FACEIT API error in text handler: {e}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–≥—Ä–æ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –µ—â–µ —Ä–∞–∑:",
                parse_mode=ParseMode.HTML
            )
    elif not user or not user.faceit_player_id:
        await message.answer(
            "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É.\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ FACEIT –∞–∫–∫–∞—É–Ω—Ç –∫–æ–º–∞–Ω–¥–æ–π /setplayer –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start.",
            parse_mode=ParseMode.HTML
        )
    else:
        await message.answer(
            "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.",
            parse_mode=ParseMode.HTML,
            reply_markup=get_main_menu()
        )


# ==================== STATISTICS CALLBACK HANDLERS ====================

@router.callback_query(F.data == "my_stats")
async def callback_my_stats(callback: CallbackQuery):
    """Handle my stats callback - show statistics menu."""
    await callback.answer()
    
    user = await storage.get_user(callback.from_user.id)
    if not user or not user.faceit_player_id:
        await callback.message.edit_text(
            "‚ùå <b>–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /setplayer",
            parse_mode=ParseMode.HTML
        )
        return
    
    await callback.message.edit_text(
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞ {user.faceit_nickname}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        parse_mode=ParseMode.HTML,
        reply_markup=get_stats_menu()
    )

@router.callback_query(F.data == "stats_general")
async def callback_stats_general(callback: CallbackQuery):
    """Handle general statistics callback."""
    await callback.answer()
    
    user = await storage.get_user(callback.from_user.id)
    if not user or not user.faceit_player_id:
        await callback.message.edit_text(
            "‚ùå <b>–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç</b>",
            parse_mode=ParseMode.HTML
        )
        return
    
    try:
        await callback.message.edit_text("üìä –ü–æ–ª—É—á–∞—é –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...", parse_mode=ParseMode.HTML)
        
        player = await faceit_api.get_player_by_id(user.faceit_player_id)
        stats = await faceit_api.get_player_stats(user.faceit_player_id, "cs2")
        
        if not player or not stats:
            await callback.message.edit_text("‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", parse_mode=ParseMode.HTML)
            return
        
        general_text = MessageFormatter.format_player_stats(player, stats)
        
        await callback.message.edit_text(
            general_text,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="my_stats")]
            ])
        )
    except Exception as e:
        logger.error(f"Error showing general stats: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="my_stats")]
            ])
        )

@router.callback_query(F.data == "stats_detailed")
async def callback_stats_detailed(callback: CallbackQuery):
    """Handle detailed statistics callback."""
    await callback.answer()
    
    user = await storage.get_user(callback.from_user.id)
    if not user or not user.faceit_player_id:
        await callback.message.edit_text(
            "‚ùå <b>–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç</b>",
            parse_mode=ParseMode.HTML
        )
        return
    
    try:
        await callback.message.edit_text("üìà –ü–æ–ª—É—á–∞—é –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...", parse_mode=ParseMode.HTML)
        
        stats = await faceit_api.get_player_stats(user.faceit_player_id, "cs2")
        
        if not stats:
            await callback.message.edit_text("‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", parse_mode=ParseMode.HTML)
            return
        
        # Get player info for advanced stats
        player = await faceit_api.get_player_by_id(user.faceit_player_id)
        if not player:
            await callback.message.edit_text("‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", parse_mode=ParseMode.HTML)
            return
            
        # Use advanced CS2 formatter
        detailed_text = format_cs2_advanced_stats(player, stats)
        
        await callback.message.edit_text(
            detailed_text,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="my_stats")]
            ])
        )
    except Exception as e:
        logger.error(f"Error showing detailed stats: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="my_stats")]
            ])
        )

@router.callback_query(F.data == "stats_maps")
async def callback_stats_maps(callback: CallbackQuery):
    """Handle map statistics callback with real per-map analysis."""
    await callback.answer()
    
    user = await storage.get_user(callback.from_user.id)
    if not user or not user.faceit_player_id:
        await callback.message.edit_text(
            "‚ùå <b>–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç</b>",
            parse_mode=ParseMode.HTML
        )
        return
    
    try:
        await callback.message.edit_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ä—Ç–∞–º...", parse_mode=ParseMode.HTML)
        
        # Get player info for map analysis
        player = await faceit_api.get_player_by_id(user.faceit_player_id)
        if not player:
            await callback.message.edit_text("‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", parse_mode=ParseMode.HTML)
            return
            
        # Use proper map analysis from MessageFormatter with real match data
        maps_text = await MessageFormatter.format_map_analysis(
            player,
            faceit_api,
            limit=100  # Analyze last 100 matches for accurate map statistics
        )
        
        await callback.message.edit_text(
            maps_text,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="my_stats")]
            ])
        )
    except Exception as e:
        logger.error(f"Error showing map stats: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞—Ä—Ç",
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="my_stats")]
            ])
        )

@router.callback_query(F.data == "stats_sessions")
async def callback_stats_sessions(callback: CallbackQuery):
    """Handle session statistics callback with proper session analysis."""
    await callback.answer()
    
    user = await storage.get_user(callback.from_user.id)
    if not user or not user.faceit_player_id:
        await callback.message.edit_text(
            "‚ùå <b>–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç</b>",
            parse_mode=ParseMode.HTML
        )
        return
    
    try:
        # Show loading message
        await callback.message.edit_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–≥—Ä–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏...", parse_mode=ParseMode.HTML)
        
        # Get player info for sessions analysis
        player = await faceit_api.get_player_by_id(user.faceit_player_id)
        if not player:
            await callback.message.edit_text("‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", parse_mode=ParseMode.HTML)
            return
            
        # Use proper sessions analysis from MessageFormatter with real match data  
        sessions_text = await MessageFormatter.format_sessions_analysis(
            player,
            faceit_api,
            limit=100  # Analyze last 100 matches for session grouping
        )
        
        await callback.message.edit_text(
            sessions_text,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="my_stats")]
            ])
        )
    except Exception as e:
        logger.error(f"Error showing session stats: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–π",
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="my_stats")]
            ])
        )

@router.callback_query(F.data == "stats_weapons")
async def callback_stats_weapons(callback: CallbackQuery):
    """Handle weapon statistics callback."""
    await callback.answer()
    
    user = await storage.get_user(callback.from_user.id)
    if not user or not user.faceit_player_id:
        await callback.message.edit_text(
            "‚ùå <b>–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç</b>",
            parse_mode=ParseMode.HTML
        )
        return
    
    try:
        await callback.message.edit_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ—Ä—É–∂–∏—é...", parse_mode=ParseMode.HTML)
        
        # Get player stats for weapon analysis
        stats = await faceit_api.get_player_stats(user.faceit_player_id, "cs2")
        if not stats:
            await callback.message.edit_text("‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", parse_mode=ParseMode.HTML)
            return
            
        # Use weapon stats formatter
        weapon_text = format_weapon_stats(stats)
        
        await callback.message.edit_text(
            weapon_text,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="my_stats")]
            ])
        )
    
    except Exception as e:
        logger.error(f"Error showing weapon stats: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –æ—Ä—É–∂–∏—é",
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="my_stats")]
            ])
        )

@router.callback_query(F.data.in_(["stats_10", "stats_30", "stats_60"]))
async def callback_stats_matches(callback: CallbackQuery):
    """Handle match statistics callback."""
    await callback.answer()
    
    user = await storage.get_user(callback.from_user.id)
    if not user or not user.faceit_player_id:
        await callback.message.edit_text(
            "‚ùå <b>–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç</b>",
            parse_mode=ParseMode.HTML
        )
        return
    
    # Extract match count from callback data
    match_count = int(callback.data.split("_")[1])
    
    try:
        await callback.message.edit_text(
            f"üìä –ü–æ–ª—É—á–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {match_count} –º–∞—Ç—á–µ–π...", 
            parse_mode=ParseMode.HTML
        )
        
        player = await faceit_api.get_player_by_id(user.faceit_player_id)
        if not player:
            await callback.message.edit_text("‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", parse_mode=ParseMode.HTML)
            return
        
        # Get matches with statistics
        matches_text = await MessageFormatter.format_recent_matches_analysis(
            player, faceit_api, limit=match_count
        )
        
        await callback.message.edit_text(
            matches_text,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="my_stats")]
            ])
        )
    except Exception as e:
        logger.error(f"Error getting match statistics: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Ç—á–µ–π",
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="my_stats")]
            ])
        )

@router.callback_query(F.data == "stats_playstyle")
async def callback_stats_playstyle(callback: CallbackQuery):
    """Handle playstyle statistics callback."""
    await callback.answer()
    
    user = await storage.get_user(callback.from_user.id)
    if not user or not user.faceit_player_id:
        await callback.message.edit_text(
            "‚ùå <b>–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç</b>",
            parse_mode=ParseMode.HTML
        )
        return
    
    try:
        await callback.message.edit_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç–∏–ª—å –∏–≥—Ä—ã...", parse_mode=ParseMode.HTML)
        
        stats = await faceit_api.get_player_stats(user.faceit_player_id, "cs2")
        if not stats:
            await callback.message.edit_text("‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", parse_mode=ParseMode.HTML)
            return
            
        playstyle_text = format_player_playstyle(stats)
        
        await callback.message.edit_text(
            playstyle_text,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="my_stats")]
            ])
        )
    except Exception as e:
        logger.error(f"Error showing playstyle stats: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∏–ª—è –∏–≥—Ä—ã",
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="my_stats")]
            ])
        )