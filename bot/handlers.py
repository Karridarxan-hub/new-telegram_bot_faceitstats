"""Bot command handlers."""

import logging
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command, CommandStart
from aiogram.enums import ParseMode

from faceit.api import FaceitAPI, FaceitAPIError
from utils.storage import storage, UserData
from utils.formatter import MessageFormatter

logger = logging.getLogger(__name__)

router = Router()
faceit_api = FaceitAPI()


@router.message(CommandStart())
async def cmd_start(message: Message) -> None:
    """Handle /start command."""
    welcome_text = """
üéÆ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FACEIT Stats Bot!**

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∞—à–∏—Ö –º–∞—Ç—á–µ–π –≤ CS2 –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ FACEIT\\.

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/setplayer <nickname> \\- –ø—Ä–∏–≤—è–∑–∞—Ç—å FACEIT –∞–∫–∫–∞—É–Ω—Ç
/lastmatch \\- –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ç—á
/matches \\[–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\\] \\- –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏ \\(–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5\\)
/profile \\- –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ
/help \\- –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

**–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:**
1\\. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /setplayer —Å –≤–∞—à–∏–º –Ω–∏–∫–Ω–µ–π–º–æ–º –≤ FACEIT
2\\. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å –æ –Ω–æ–≤—ã—Ö –º–∞—Ç—á–∞—Ö

–ü—Ä–∏–º–µ—Ä: `/setplayer YourNickname`
"""
    
    await message.answer(welcome_text, parse_mode=ParseMode.MARKDOWN_V2)


@router.message(Command("setplayer"))
async def cmd_set_player(message: Message) -> None:
    """Handle /setplayer command."""
    if not message.text:
        return
        
    args = message.text.split()[1:]
    if not args:
        await message.answer(
            "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–∏–º –≤ FACEIT\\.\n"
            "–ü—Ä–∏–º–µ—Ä: `/setplayer YourNickname`",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return
    
    nickname = " ".join(args).strip()
    await message.answer("üîç –ò—â—É –∏–≥—Ä–æ–∫–∞\\.\\.\\.", parse_mode=ParseMode.MARKDOWN_V2)
    
    try:
        player = await faceit_api.search_player(nickname)
        if not player:
            await message.answer(
                f"‚ùå –ò–≥—Ä–æ–∫ —Å –Ω–∏–∫–Ω–µ–π–º–æ–º \"{nickname}\" –Ω–µ –Ω–∞–π–¥–µ–Ω\\. "
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è\\.",
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return
        
        user_data = UserData(
            user_id=message.from_user.id,
            faceit_player_id=player.player_id,
            faceit_nickname=player.nickname
        )
        await storage.save_user(user_data)
        
        player_info = MessageFormatter.format_player_info(player)
        success_text = f"‚úÖ –ò–≥—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω\\!\\n\\n{player_info}"
        
        await message.answer(success_text, parse_mode=ParseMode.MARKDOWN_V2)
        logger.info(f"User {message.from_user.id} linked player {player.nickname}")
        
    except FaceitAPIError as e:
        logger.error(f"FACEIT API error in set_player: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–≥—Ä–æ–∫–∞\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ\\.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
    except Exception as e:
        logger.error(f"Unexpected error in set_player: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞\\.",
            parse_mode=ParseMode.MARKDOWN_V2
        )


@router.message(Command("lastmatch"))
async def cmd_last_match(message: Message) -> None:
    """Handle /lastmatch command."""
    user = await storage.get_user(message.from_user.id)
    if not user or not user.faceit_player_id:
        await message.answer(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–π FACEIT –∞–∫–∫–∞—É–Ω—Ç –∫–æ–º–∞–Ω–¥–æ–π /setplayer",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return
    
    await message.answer(
        "üîç –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –º–∞—Ç—á–µ\\.\\.\\.",
        parse_mode=ParseMode.MARKDOWN_V2
    )
    
    try:
        matches = await faceit_api.get_player_matches(user.faceit_player_id, limit=1)
        if not matches:
            await message.answer(
                "‚ùå –ú–∞—Ç—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\\.",
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return
        
        match = matches[0]
        if match.status != "FINISHED":
            await message.answer(
                "‚è≥ –ü–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ç—á –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω\\.",
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return
        
        stats = await faceit_api.get_match_stats(match.match_id)
        formatted_message = MessageFormatter.format_match_result(
            match, stats, user.faceit_player_id
        )
        
        await message.answer(formatted_message, parse_mode=ParseMode.MARKDOWN_V2)
        logger.info(f"Sent last match info to user {message.from_user.id}")
        
    except FaceitAPIError as e:
        logger.error(f"FACEIT API error in last_match: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–∞\\.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
    except Exception as e:
        logger.error(f"Unexpected error in last_match: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞\\.",
            parse_mode=ParseMode.MARKDOWN_V2
        )


@router.message(Command("matches"))
async def cmd_matches(message: Message) -> None:
    """Handle /matches command."""
    user = await storage.get_user(message.from_user.id)
    if not user or not user.faceit_player_id:
        await message.answer(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–π FACEIT –∞–∫–∫–∞—É–Ω—Ç –∫–æ–º–∞–Ω–¥–æ–π /setplayer",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return
    
    # Parse limit from command
    limit = 5
    if message.text:
        args = message.text.split()[1:]
        if args and args[0].isdigit():
            limit = min(int(args[0]), 20)
    
    await message.answer(
        f"üîç –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö {limit} –º–∞—Ç—á–∞—Ö\\.\\.\\.",
        parse_mode=ParseMode.MARKDOWN_V2
    )
    
    try:
        matches = await faceit_api.get_player_matches(user.faceit_player_id, limit=limit)
        finished_matches = [match for match in matches if match.status == "FINISHED"]
        
        if not finished_matches:
            await message.answer(
                "‚ùå –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –º–∞—Ç—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\\.",
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return
        
        formatted_message = MessageFormatter.format_matches_list(
            finished_matches, user.faceit_player_id
        )
        
        await message.answer(formatted_message, parse_mode=ParseMode.MARKDOWN_V2)
        logger.info(f"Sent matches list to user {message.from_user.id}")
        
    except FaceitAPIError as e:
        logger.error(f"FACEIT API error in matches: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π\\.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
    except Exception as e:
        logger.error(f"Unexpected error in matches: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞\\.",
            parse_mode=ParseMode.MARKDOWN_V2
        )


@router.message(Command("profile"))
async def cmd_profile(message: Message) -> None:
    """Handle /profile command."""
    user = await storage.get_user(message.from_user.id)
    if not user or not user.faceit_player_id:
        await message.answer(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–π FACEIT –∞–∫–∫–∞—É–Ω—Ç –∫–æ–º–∞–Ω–¥–æ–π /setplayer",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return
    
    await message.answer(
        "üîç –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ\\.\\.\\.",
        parse_mode=ParseMode.MARKDOWN_V2
    )
    
    try:
        player = await faceit_api.get_player_by_id(user.faceit_player_id)
        if not player:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ\\.",
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return
        
        formatted_message = MessageFormatter.format_player_info(player)
        await message.answer(formatted_message, parse_mode=ParseMode.MARKDOWN_V2)
        logger.info(f"Sent profile info to user {message.from_user.id}")
        
    except FaceitAPIError as e:
        logger.error(f"FACEIT API error in profile: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ñ–∏–ª–µ\\.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
    except Exception as e:
        logger.error(f"Unexpected error in profile: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞\\.",
            parse_mode=ParseMode.MARKDOWN_V2
        )


@router.message(Command("help"))
async def cmd_help(message: Message) -> None:
    """Handle /help command."""
    help_text = """
**üéÆ FACEIT Stats Bot \\- –°–ø—Ä–∞–≤–∫–∞**

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**

/start \\- –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/setplayer <nickname> \\- –ø—Ä–∏–≤—è–∑–∞—Ç—å FACEIT –∞–∫–∫–∞—É–Ω—Ç
/lastmatch \\- –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –º–∞—Ç—á —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
/matches \\[–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\\] \\- –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∞—Ç—á–µ–π \\(–º–∞–∫—Å–∏–º—É–º 20\\)
/profile \\- –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º FACEIT –ø—Ä–æ—Ñ–∏–ª–µ
/help \\- –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

**–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**
–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–∞—Ö —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π\\.

**–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
`/setplayer s1mple`
`/matches 10`
`/lastmatch`

**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:** –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É\\.
"""
    
    await message.answer(help_text, parse_mode=ParseMode.MARKDOWN_V2)