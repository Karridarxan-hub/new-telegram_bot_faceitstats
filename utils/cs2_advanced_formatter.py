"""Advanced CS2 statistics formatting with professional metrics and visual enhancements."""

import logging
from functools import lru_cache
from typing import Tuple, Dict, Any, List
from faceit.models import FaceitPlayer
from .visual_formatter import VisualFormatter, quick_progress_bar, quick_rank_display, quick_trend

logger = logging.getLogger(__name__)


@lru_cache(maxsize=1000)
def _calculate_performance_metrics(kd_ratio: float, kr_ratio: float, hs_percent: float, win_rate: float) -> Dict[str, Any]:
    """Cache expensive performance metric calculations."""
    # ADR estimation (Average Damage per Round)
    estimated_adr = int(kd_ratio * 70) if kd_ratio > 0 else 50
    
    # Calculate KAST (Kill, Assist, Survive, Trade) - approximation
    estimated_kast = min(95, max(45, (kd_ratio * 35) + (kr_ratio * 25) + 25))
    
    # Entry frags estimation
    if kd_ratio > 1.2 and kr_ratio > 0.75:
        entry_rate = "–í—ã—Å–æ–∫–∏–π (~25%)"
        entry_emoji = "‚öîÔ∏è"
    elif kd_ratio > 1.0:
        entry_rate = "–°—Ä–µ–¥–Ω–∏–π (~15%)"
        entry_emoji = "üéØ"
    else:
        entry_rate = "–ù–∏–∑–∫–∏–π (~8%)"
        entry_emoji = "üõ°Ô∏è"
    
    # Clutch success estimation
    if kd_ratio > 1.3:
        clutch_rate = "–û—Ç–ª–∏—á–Ω—ã–π (>30%)"
        clutch_emoji = "üëë"
    elif kd_ratio > 1.0:
        clutch_rate = "–•–æ—Ä–æ—à–∏–π (~25%)"
        clutch_emoji = "üí™"
    else:
        clutch_rate = "–°—Ä–µ–¥–Ω–∏–π (~15%)"
        clutch_emoji = "ü§ù"
    
    # HLTV 2.0 rating estimation
    kills_per_round = kr_ratio
    survival_rate = max(0.3, min(0.8, (kd_ratio - 0.5) * 0.4 + 0.5))
    hltv_rating = (kills_per_round * 0.7) + (survival_rate * 0.2) + ((hs_percent/100) * 0.1)
    hltv_rating = max(0.5, min(2.0, hltv_rating))
    
    return {
        "estimated_adr": estimated_adr,
        "estimated_kast": estimated_kast,
        "entry_rate": entry_rate,
        "entry_emoji": entry_emoji,
        "clutch_rate": clutch_rate,
        "clutch_emoji": clutch_emoji,
        "hltv_rating": hltv_rating
    }


@lru_cache(maxsize=100)
def _get_role_recommendation(kd_ratio: float, kr_ratio: float, hs_percent: float) -> Tuple[str, str, str, str]:
    """Cache role recommendation logic."""
    if kd_ratio > 1.3 and kr_ratio > 0.80:
        return ("‚öîÔ∏è <b>Entry Fragger</b> - –ø–µ—Ä–≤—ã–µ –≤—Ö–æ–¥—ã", 
                "‚Ä¢ –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –∏–≥—Ä–∞ –Ω–∞ T-—Å—Ç–æ—Ä–æ–Ω–µ", 
                "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∫–æ–º–∞–Ω–¥–µ", "entry")
    elif hs_percent > 55 and kd_ratio > 1.1:
        return ("üéØ <b>AWPer/Sniper</b> - —Å–Ω–∞–π–ø–µ—Ä—Å–∫–∞—è —Ä–æ–ª—å", 
                "‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–ª—é—á–µ–≤—ã—Ö —É–≥–ª–æ–≤", 
                "‚Ä¢ –î–∞–ª—å–Ω–∏–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏", "awper")
    elif kd_ratio > 1.0 and kr_ratio < 0.70:
        return ("üõ°Ô∏è <b>Support/Anchor</b> - –ø–æ–¥–¥–µ—Ä–∂–∫–∞", 
                "‚Ä¢ –£–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–∞–π—Ç–æ–≤ –Ω–∞ CT", 
                "‚Ä¢ –ü–æ–º–æ—â—å –∫–æ–º–∞–Ω–¥–µ", "support")
    else:
        return ("‚öñÔ∏è <b>Rifler</b> - —É–Ω–∏–≤–µ—Ä—Å–∞–ª", 
                "‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–µ –æ—Ä—É–∂–∏–µ", 
                "‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞", "rifler")


def format_cs2_advanced_stats(player: FaceitPlayer, stats: dict) -> str:
    """Format advanced CS2 statistics with professional metrics (optimized)."""
    try:
        if not stats:
            return "‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        
        lifetime = stats.get("lifetime", {})
        segments = stats.get("segments", [])
        
        # Extract metrics once for efficiency
        kd_ratio = float(lifetime.get('Average K/D Ratio', '0'))
        kr_ratio = float(lifetime.get('Average K/R Ratio', '0'))
        hs_percent = float(lifetime.get('Average Headshots %', '0'))
        win_rate = float(lifetime.get('Win Rate %', '0'))
        
        # Use cached performance calculations
        metrics = _calculate_performance_metrics(kd_ratio, kr_ratio, hs_percent, win_rate)
        
        # Get visual rank display
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –∏–∑ CS2
        cs2_game = player.games.get('cs2')
        if cs2_game:
            skill_level = cs2_game.skill_level
            elo = cs2_game.faceit_elo
        else:
            skill_level = 1
            elo = 1000
        rank_visual = quick_rank_display(skill_level, elo)
        
        # Create visual stats with progress bars
        kd_bar = quick_progress_bar(min(kd_ratio, 3.0), 3.0)  # Cap at 3.0 for better visualization
        hs_bar = quick_progress_bar(hs_percent, 100)
        wr_bar = quick_progress_bar(win_rate, 100)
        adr_bar = quick_progress_bar(min(metrics['estimated_adr'], 120), 120)  # Cap at 120 ADR
        
        # Performance summary
        perf_stats = {
            'kd': kd_ratio,
            'win_rate': win_rate,
            'hs_rate': hs_percent
        }
        performance_summary = VisualFormatter.create_performance_summary(perf_stats)
        
        # Build string efficiently using list and join
        parts = [
            f"üéØ <b>–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è CS2 —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>",
            f"üë§ <b>–ò–≥—Ä–æ–∫:</b> {player.nickname}",
            "",
            "üèÜ <b>–†–∞–Ω–≥ –∏ ELO:</b>",
            rank_visual,
            "",
            "üìä <b>–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º:</b>",
            f"üéØ <b>K/D:</b> {kd_ratio:.2f}",
            f"   {kd_bar}",
            f"‚öîÔ∏è <b>K/R:</b> {kr_ratio:.2f}",
            f"üí• <b>ADR:</b> ~{metrics['estimated_adr']}",
            f"   {adr_bar}",
            f"üé™ <b>HS%:</b> {hs_percent:.1f}%",
            f"   {hs_bar}",
            f"üèÜ <b>–í–∏–Ω—Ä–µ–π—Ç:</b> {win_rate:.1f}%",
            f"   {wr_bar}",
            "",
            "üéØ <b>–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏:</b>",
            f"‚Ä¢ <b>KAST%:</b> ~{metrics['estimated_kast']:.0f}% (—Ä–∞—Å—á—ë—Ç–Ω—ã–π)",
            f"‚Ä¢ <b>Entry Frags:</b> {metrics['entry_emoji']} {metrics['entry_rate']}",
            f"‚Ä¢ <b>Clutch —É—Å–ø–µ—Ö:</b> {metrics['clutch_emoji']} {metrics['clutch_rate']}",
            "",
            f"‚≠ê <b>HLTV 2.0 Rating:</b> {metrics['hltv_rating']:.2f}"
        ]
        
        # Rating assessment
        if metrics['hltv_rating'] > 1.3:
            parts.append("üåü –í—ã–¥–∞—é—â–∏–π—Å—è —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã")
        elif metrics['hltv_rating'] > 1.1:
            parts.append("üî• –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã")
        elif metrics['hltv_rating'] > 0.9:
            parts.append("‚úÖ –•–æ—Ä–æ—à–∏–π —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã")
        else:
            parts.append("üìö –ï—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —Ä–æ—Å—Ç–∞")
        
        # Performance analysis
        parts.extend([
            "üìà <b>–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:</b>",
        ])
        
        total_matches = int(lifetime.get('Matches', '0'))
        
        if win_rate > 60:
            parts.append("üü¢ <b>–û—Ç–ª–∏—á–Ω–∞—è —Ñ–æ—Ä–º–∞</b> - —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø–æ–±–µ–¥—ã")
        elif win_rate > 50:
            parts.append("üü° <b>–•–æ—Ä–æ—à–∞—è —Ñ–æ—Ä–º–∞</b> - –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –≤–∏–Ω—Ä–µ–π—Ç")
        else:
            parts.append("üî¥ <b>–¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏–π</b> - —Ä–∞–±–æ—Ç–∞–π—Ç–µ –Ω–∞–¥ –∏–≥—Ä–æ–π")
            
        parts.extend([
            f"‚Ä¢ –í—Å–µ–≥–æ –º–∞—Ç—á–µ–π: {total_matches}",
            f"‚Ä¢ –ü–æ–±–µ–¥: {int(lifetime.get('Wins', '0'))}",
            "",
            "üéÆ <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Ä–æ–ª—å:</b>"
        ])
        
        # Use cached role recommendation
        role_info = _get_role_recommendation(kd_ratio, kr_ratio, hs_percent)
        parts.extend([
            role_info[0],
            role_info[1],
            role_info[2]
        ])
        
        # Recent form analysis with visual trends
        if segments:
            recent = segments[0].get("stats", {})
            recent_kd = float(recent.get('K/D Ratio', '0'))
            avg_kd = kd_ratio  # Use already extracted value
            
            # Create trend visualization
            trend_indicator = quick_trend(recent_kd, avg_kd)
            
            # Create K/D trend chart (simulated with current and average)
            kd_trend = VisualFormatter.create_kd_trend_chart([avg_kd * 0.9, avg_kd, recent_kd])
            
            parts.extend([
                "",
                "üìä <b>–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Ñ–æ—Ä–º—ã:</b>",
                f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏: {trend_indicator}",
                kd_trend
            ])
        
        # Add overall performance summary
        parts.extend([
            "",
            "üìà <b>–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:</b>",
            performance_summary
        ])
        
        # ELO progression visualization
        if skill_level < 10:
            elo_progression = VisualFormatter.create_elo_progression_chart(elo)
            parts.extend([
                "",
                elo_progression
            ])
        
        # Personalized recommendations with visual priority
        parts.extend([
            "",
            "üí° <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>"
        ])
        
        if kd_ratio < 1.0:
            priority_bar = quick_progress_bar(3, 5)  # High priority
            parts.extend([
                f"üî¥ <b>–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {priority_bar}",
                "‚Ä¢ üéØ –£–ª—É—á—à–∞–π—Ç–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
                "‚Ä¢ üé™ –¢—Ä–µ–Ω–∏—Ä—É–π—Ç–µ crosshair placement",
                "‚Ä¢ üó∫Ô∏è –ò–∑—É—á–∞–π—Ç–µ –∫–∞—Ä—Ç—ã –≥–ª—É–±–∂–µ"
            ])
        elif kd_ratio < 1.2:
            priority_bar = quick_progress_bar(2, 3)  # Medium priority
            parts.extend([
                f"üü° <b>–°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {priority_bar}",
                "‚Ä¢ üß† –†–∞–±–æ—Ç–∞–π—Ç–µ –Ω–∞–¥ game sense",
                "‚Ä¢ üë• –£–ª—É—á—à–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥–Ω—É—é –∏–≥—Ä—É",
                "‚Ä¢ üí∞ –ò–∑—É—á–∞–π—Ç–µ —ç–∫–æ–Ω–æ–º–∏–∫—É"
            ])
        else:
            priority_bar = quick_progress_bar(1, 2)  # Low priority
            parts.extend([
                f"üü¢ <b>–≠–ª–∏—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å:</b> {priority_bar}",
                "‚Ä¢ üëë –†–∞–∑–≤–∏–≤–∞–π—Ç–µ –ª–∏–¥–µ—Ä—Å–∫–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞",
                "‚Ä¢ üéØ –ü–æ–º–æ–≥–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥–µ —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏",
                "‚Ä¢ üì∫ –ò–∑—É—á–∞–π—Ç–µ –ø—Ä–æ-—Å—Ü–µ–Ω—É"
            ])
        
        # Map-specific advice with visual indicators
        parts.extend([
            "",
            "üó∫Ô∏è <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–∞—Ä—Ç—ã:</b>"
        ])
        
        if kd_ratio > 1.2:  # Aggressive players
            style_match = quick_progress_bar(4, 5)
            parts.extend([
                f"‚öîÔ∏è <b>–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Å—Ç–∏–ª—å</b> {style_match}",
                "‚Ä¢ üèúÔ∏è Dust2 - –æ—Ç–∫—Ä—ã—Ç—ã–µ –¥—É—ç–ª–∏",
                "‚Ä¢ üè¢ Mirage - –º–∏–¥-–∫–æ–Ω—Ç—Ä–æ–ª—å",
                "‚Ä¢ üè≠ Cache - –±—ã—Å—Ç—Ä—ã–µ —Ä–∞—à–∏"
            ])
        elif hs_percent > 50:  # Accurate players  
            style_match = quick_progress_bar(3, 4)
            parts.extend([
                f"üéØ <b>–¢–æ—á–Ω–∞—è —Å—Ç—Ä–µ–ª—å–±–∞</b> {style_match}",
                "‚Ä¢ üöÇ Train - –¥–∞–ª—å–Ω–∏–µ –¥—É—ç–ª–∏",
                "‚Ä¢ üåâ Overpass - –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å",
                "‚Ä¢ üè∫ Ancient - —Ç–æ—á–Ω–æ—Å—Ç—å –≤–∞–∂–Ω–∞"
            ])
        else:  # Tactical players
            style_match = quick_progress_bar(3, 4)
            parts.extend([
                f"üß† <b>–¢–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞</b> {style_match}",
                "‚Ä¢ üî• Inferno - —É–∑–∫–∏–µ –ø—Ä–æ—Ö–æ–¥—ã",
                "‚Ä¢ ‚öõÔ∏è Nuke - –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞",
                "‚Ä¢ üè¢ Mirage - –∫–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞"
            ])
        
        # Join all parts efficiently (much faster than string concatenation)
        return "\n".join(parts)
        
    except Exception as e:
        logger.error(f"Error formatting CS2 advanced stats: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {player.nickname}"


def format_weapon_stats(stats: dict) -> str:
    """Format weapon-specific statistics with visual enhancements."""
    try:
        lifetime = stats.get("lifetime", {})
        hs_percent = float(lifetime.get('Average Headshots %', '0'))
        kd_ratio = float(lifetime.get('Average K/D Ratio', '0'))
        kr_ratio = float(lifetime.get('Average K/R Ratio', '0'))
        
        # Create weapon proficiency visualization
        rifle_proficiency = min(100, (kd_ratio * 30) + (hs_percent * 0.8))
        awp_proficiency = min(100, (hs_percent * 1.2) + (kd_ratio * 20))
        smg_proficiency = min(100, (kr_ratio * 80) + (kd_ratio * 15))
        
        rifle_bar = quick_progress_bar(rifle_proficiency, 100)
        awp_bar = quick_progress_bar(awp_proficiency, 100)
        smg_bar = quick_progress_bar(smg_proficiency, 100)
        
        text = "üî´ <b>–ê–Ω–∞–ª–∏–∑ –æ—Ä—É–∂–∏—è —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π</b>\n\n"
        
        # Weapon proficiency with bars
        text += "üìä <b>–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ:</b>\n"
        text += f"üéØ <b>Rifles (AK/M4):</b> {rifle_proficiency:.0f}%\n"
        text += f"   {rifle_bar}\n"
        text += f"üî≠ <b>AWP/–°–Ω–∞–π–ø–µ—Ä–∫–∏:</b> {awp_proficiency:.0f}%\n"
        text += f"   {awp_bar}\n"
        text += f"üí• <b>SMG/–ü–∏—Å—Ç–æ–ª–µ—Ç—ã:</b> {smg_proficiency:.0f}%\n"
        text += f"   {smg_bar}\n\n"
        
        # Weapon recommendations based on stats
        text += "üéØ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ—Ä—É–∂–∏—é:</b>\n"
        
        if hs_percent > 55:
            text += "‚≠ê <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> AWP –∏ —Ç–æ—á–Ω–∞—è —Å—Ç—Ä–µ–ª—å–±–∞\n"
            text += "‚Ä¢ üî≠ –¢—Ä–µ–Ω–∏—Ä—É–π—Ç–µ AWP –ø–æ–∑–∏—Ü–∏–∏\n"
            text += "‚Ä¢ üéØ –†–∞–∑–≤–∏–≤–∞–π—Ç–µ –æ–¥–∏–Ω-—Ç–∞–ø—ã\n"
        elif kd_ratio > 1.2:
            text += "‚öîÔ∏è <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –≤–∏–Ω—Ç–æ–≤–∫–∏\n" 
            text += "‚Ä¢ üî• –ò–∑—É—á–∞–π—Ç–µ —Å–ø—Ä–µ–π AK-47\n"
            text += "‚Ä¢ üí® –¢—Ä–µ–Ω–∏—Ä—É–π—Ç–µ –±—ã—Å—Ç—Ä—ã–µ –ø–∏–∫–∏\n"
        else:
            text += "üõ°Ô∏è <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ —É—Ç–∏–ª–∏—Ç—ã\n"
            text += "‚Ä¢ üí£ –ò–∑—É—á–∞–π—Ç–µ –≥—Ä–∞–Ω–∞—Ç—ã\n"
            text += "‚Ä¢ üîß –§–æ–∫—É—Å –Ω–∞ –∫–æ–º–∞–Ω–¥–Ω–æ–π –∏–≥—Ä–µ\n"
            
        # Training recommendations with progress tracking
        text += "\nüìà <b>–ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:</b>\n"
        aim_progress = quick_progress_bar(min(hs_percent, 80), 80)
        spray_progress = quick_progress_bar(min(kd_ratio * 50, 100), 100)
        
        text += f"üé™ <b>–¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–∏—Ü–µ–ª–∞:</b>\n   {aim_progress}\n"
        text += f"üî• <b>–ö–æ–Ω—Ç—Ä–æ–ª—å –æ—Ç–¥–∞—á–∏:</b>\n   {spray_progress}\n"
        
        return text
        
    except Exception as e:
        logger.error(f"Error formatting weapon stats: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –æ—Ä—É–∂–∏—è"


def format_map_specific_progress(stats: dict, map_name: str = None) -> str:
    """Format map-specific progress with visual progress indicators."""
    try:
        lifetime = stats.get("lifetime", {})
        kd_ratio = float(lifetime.get('Average K/D Ratio', '0'))
        win_rate = float(lifetime.get('Win Rate %', '0'))
        total_matches = int(lifetime.get('Matches', '0'))
        
        text = f"üó∫Ô∏è <b>–í–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫–∞—Ä—Ç–∞–º</b>\n\n"
        
        # CS2 Active Duty maps with visual progress
        maps_data = {
            "Dust2": {"emoji": "üèúÔ∏è", "difficulty": "–ü—Ä–æ—Å—Ç–∞—è", "style": "–ê–≥—Ä–µ—Å—Å–∏—è"},
            "Mirage": {"emoji": "üè¢", "difficulty": "–°—Ä–µ–¥–Ω—è—è", "style": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª"},
            "Inferno": {"emoji": "üî•", "difficulty": "–°–ª–æ–∂–Ω–∞—è", "style": "–¢–∞–∫—Ç–∏–∫–∞"},
            "Nuke": {"emoji": "‚öõÔ∏è", "difficulty": "–û—á–µ–Ω—å —Å–ª–æ–∂–Ω–∞—è", "style": "–ö–æ–º–∞–Ω–¥–Ω–∞—è"},
            "Overpass": {"emoji": "üåâ", "difficulty": "–°–ª–æ–∂–Ω–∞—è", "style": "–ü–æ–∑–∏—Ü–∏–∏"},
            "Vertigo": {"emoji": "üèóÔ∏è", "difficulty": "–°—Ä–µ–¥–Ω—è—è", "style": "–í–µ—Ä—Ç–∏–∫–∞–ª—å"},
            "Ancient": {"emoji": "üè∫", "difficulty": "–°—Ä–µ–¥–Ω—è—è", "style": "–¢–æ—á–Ω–æ—Å—Ç—å"}
        }
        
        text += "üìä <b>–ê–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –∫–∞—Ä—Ç–∞–º:</b>\n\n"
        
        for map_name, map_info in maps_data.items():
            # Calculate map suitability based on player style
            if map_name in ["Dust2", "Mirage"] and kd_ratio > 1.1:
                suitability = min(95, (kd_ratio * 40) + (win_rate * 0.5))
                status = "üü¢"
            elif map_name in ["Inferno", "Nuke"] and win_rate > 55:
                suitability = min(85, (win_rate * 0.8) + (kd_ratio * 30))
                status = "üü°"
            elif map_name in ["Overpass", "Vertigo", "Ancient"]:
                suitability = max(30, min(75, (kd_ratio * 35) + (win_rate * 0.4)))
                status = "üü°" if kd_ratio >= 1.0 else "üî¥"
            else:
                suitability = (kd_ratio * 35) + (win_rate * 0.5)
                status = "üü°"
            
            # Create progress bar for map readiness
            map_bar = quick_progress_bar(suitability, 100)
            
            text += f"{map_info['emoji']} <b>{map_name}</b> - {map_info['style']}\n"
            text += f"   –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {status} {suitability:.0f}%\n"
            text += f"   {map_bar}\n\n"
        
        # Overall map pool analysis
        avg_readiness = sum([
            min(95, (kd_ratio * 40) + (win_rate * 0.5)) if map_name in ["Dust2", "Mirage"] else
            min(85, (win_rate * 0.8) + (kd_ratio * 30)) if map_name in ["Inferno", "Nuke"] else
            max(30, min(75, (kd_ratio * 35) + (win_rate * 0.4)))
            for map_name in maps_data.keys()
        ]) / len(maps_data)
        
        overall_bar = quick_progress_bar(avg_readiness, 100)
        text += f"üìà <b>–û–±—â–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø—É–ª–∞:</b> {avg_readiness:.0f}%\n"
        text += f"{overall_bar}\n\n"
        
        # Priority learning recommendations
        text += "üéØ <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –æ–±—É—á–µ–Ω–∏—è:</b>\n"
        
        if avg_readiness < 50:
            priority_maps = ["Dust2", "Mirage"]
            text += "üî¥ <b>–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> –ë–∞–∑–æ–≤—ã–µ –∫–∞—Ä—Ç—ã\n"
        elif avg_readiness < 75:
            priority_maps = ["Inferno", "Overpass"]
            text += "üü° <b>–°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> –¢–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç—ã\n"
        else:
            priority_maps = ["Vertigo", "Ancient"]
            text += "üü¢ <b>–ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> –ù–æ–≤—ã–µ –∫–∞—Ä—Ç—ã\n"
        
        for priority_map in priority_maps:
            text += f"‚Ä¢ {maps_data[priority_map]['emoji']} {priority_map} - {maps_data[priority_map]['style']}\n"
        
        # Training plan with visual progress tracking
        text += "\nüìö <b>–ü–ª–∞–Ω –∏–∑—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç:</b>\n"
        weeks_progress = quick_progress_bar(min(total_matches, 100), 100)
        text += f"–û–ø—ã—Ç –≤ –º–∞—Ç—á–∞—Ö: {total_matches}\n{weeks_progress}\n\n"
        
        text += "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
        text += "‚Ä¢ üì∫ –°–º–æ—Ç—Ä–∏—Ç–µ –¥–µ–º–∫–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤\n"
        text += "‚Ä¢ üí£ –ò–∑—É—á–∞–π—Ç–µ –Ω–∞–±–æ—Ä –≥—Ä–∞–Ω–∞—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã\n"
        text += "‚Ä¢ üó£Ô∏è –ó–∞–ø–æ–º–∏–Ω–∞–π—Ç–µ –∫–∞–ª–ª–∞—É—Ç—ã –∫–æ–º–∞–Ω–¥—ã\n"
        text += "‚Ä¢ üéØ –¢—Ä–µ–Ω–∏—Ä—É–π—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ deathmatch\n"
        
        return text
        
    except Exception as e:
        logger.error(f"Error formatting map progress: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞—Ä—Ç —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π"