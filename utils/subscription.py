"""Subscription management utilities."""

import logging
from typing import Dict, Any, Optional
from datetime import datetime, timedelta
from enum import Enum

from utils.storage import storage, SubscriptionTier, UserData

logger = logging.getLogger(__name__)


class SubscriptionManager:
    """Manages user subscriptions and billing."""
    
    # Subscription prices in Telegram Stars
    PRICES = {
        SubscriptionTier.PREMIUM: {
            "monthly": 199,  # $19.99 ‚âà 199 Stars
            "yearly": 1999   # $199.99 ‚âà 1999 Stars (2 months free)
        },
        SubscriptionTier.PRO: {
            "monthly": 299,  # $29.99 ‚âà 299 Stars
            "yearly": 2999   # $299.99 ‚âà 2999 Stars (2 months free)
        }
    }
    
    # Subscription limits (ALL FREE FOR NOW)
    LIMITS = {
        SubscriptionTier.FREE: {
            "daily_requests": -1,  # Unlimited for now
            "matches_history": 200,  # Full access
            "advanced_analytics": True,  # Free access
            "notifications": True,  # Free access
            "api_access": True  # Free access
        },
        SubscriptionTier.PREMIUM: {
            "daily_requests": -1,  # Unlimited
            "matches_history": 200,
            "advanced_analytics": True,
            "notifications": True,
            "api_access": True
        },
        SubscriptionTier.PRO: {
            "daily_requests": -1,  # Unlimited
            "matches_history": 200,
            "advanced_analytics": True,
            "notifications": True,
            "api_access": True
        }
    }
    
    @staticmethod
    async def can_access_feature(user_id: int, feature: str) -> bool:
        """Check if user can access a specific feature."""
        user = await storage.get_user(user_id)
        if not user:
            return False
        
        # Check if subscription is expired
        if (user.subscription.expires_at and 
            user.subscription.expires_at < datetime.now()):
            # Auto-downgrade expired subscription
            await storage.upgrade_subscription(user_id, SubscriptionTier.FREE, 0)
            user.subscription.tier = SubscriptionTier.FREE
        
        limits = SubscriptionManager.LIMITS.get(user.subscription.tier, {})
        return limits.get(feature, False)
    
    @staticmethod
    async def get_user_limits(user_id: int) -> Dict[str, Any]:
        """Get user's subscription limits."""
        user = await storage.get_user(user_id)
        if not user:
            return SubscriptionManager.LIMITS[SubscriptionTier.FREE]
        
        return SubscriptionManager.LIMITS.get(
            user.subscription.tier, 
            SubscriptionManager.LIMITS[SubscriptionTier.FREE]
        )
    
    @staticmethod
    async def format_subscription_status(user_id: int) -> str:
        """Format user's subscription status message."""
        user = await storage.get_user(user_id)
        if not user:
            return "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        tier_icons = {
            SubscriptionTier.FREE: "üÜì",
            SubscriptionTier.PREMIUM: "‚≠ê",
            SubscriptionTier.PRO: "üíé"
        }
        
        tier_names = {
            SubscriptionTier.FREE: "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è",
            SubscriptionTier.PREMIUM: "Premium",
            SubscriptionTier.PRO: "Pro"
        }
        
        icon = tier_icons.get(user.subscription.tier, "‚ùì")
        name = tier_names.get(user.subscription.tier, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è")
        
        message = f"{icon} <b>–ü–æ–¥–ø–∏—Å–∫–∞: {name}</b>\n\n"
        
        # Subscription details
        if user.subscription.tier != SubscriptionTier.FREE:
            if user.subscription.expires_at:
                expires_str = user.subscription.expires_at.strftime("%d.%m.%Y")
                message += f"üìÖ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {expires_str}\n"
                
                days_left = (user.subscription.expires_at - datetime.now()).days
                if days_left > 0:
                    message += f"‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:</b> {days_left}\n"
                else:
                    message += "‚ö†Ô∏è <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞</b>\n"
        
        # Usage statistics
        limits = await SubscriptionManager.get_user_limits(user_id)
        daily_limit = limits["daily_requests"]
        current_usage = user.subscription.daily_requests
        
        if daily_limit == -1:
            message += f"üöÄ <b>–ó–∞–ø—Ä–æ—Å—ã:</b> {current_usage} (–±–µ–∑–ª–∏–º–∏—Ç)\n"
        else:
            message += f"üìä <b>–ó–∞–ø—Ä–æ—Å—ã —Å–µ–≥–æ–¥–Ω—è:</b> {current_usage}/{daily_limit}\n"
        
        message += f"üéÆ <b>–ò—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π:</b> –¥–æ {limits['matches_history']} –º–∞—Ç—á–µ–π\n"
        
        # Features
        message += "\n<b>üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
        if limits["advanced_analytics"]:
            message += "‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
        else:
            message += "‚ùå –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
            
        if limits["notifications"]:
            message += "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–∞—Ö\n"
        else:
            message += "‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–∞—Ö\n"
            
        if limits["api_access"]:
            message += "‚úÖ API –¥–æ—Å—Ç—É–ø\n"
        else:
            message += "‚ùå API –¥–æ—Å—Ç—É–ø\n"
        
        # Referral info
        if user.subscription.referral_code:
            message += f"\nüéÅ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥:</b> <code>{user.subscription.referral_code}</code>\n"
            message += f"üë• <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π:</b> {user.subscription.referrals_count}\n"
        
        return message
    
    @staticmethod
    async def format_upgrade_options(user_id: int) -> str:
        """Format subscription upgrade options."""
        user = await storage.get_user(user_id)
        current_tier = user.subscription.tier if user else SubscriptionTier.FREE
        
        message = "üíé <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:</b>\n\n"
        
        # Premium option
        if current_tier != SubscriptionTier.PREMIUM:
            message += "‚≠ê <b>Premium - 199 ‚≠ê /–º–µ—Å—è—Ü</b>\n"
            message += "‚Ä¢ –î–æ 50 –º–∞—Ç—á–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏\n"
            message += "‚Ä¢ 1000 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å\n"
            message += "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
            message += "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–∞—Ö\n"
            message += "‚Ä¢ –î–µ—Ç–µ–∫—Ü–∏—è —Ç–∏–ª—å—Ç–∞\n\n"
        
        # Pro option
        if current_tier != SubscriptionTier.PRO:
            message += "üíé <b>Pro - 299 ‚≠ê /–º–µ—Å—è—Ü</b>\n"
            message += "‚Ä¢ –î–æ 200 –º–∞—Ç—á–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏\n"
            message += "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã\n"
            message += "‚Ä¢ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ Premium\n"
            message += "‚Ä¢ API –¥–æ—Å—Ç—É–ø\n"
            message += "‚Ä¢ –ö–æ–º–∞–Ω–¥–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏\n"
            message += "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
        
        message += "üéÅ <b>–ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π 17%!</b>\n"
        message += "üí∞ Premium –≥–æ–¥: 1999 ‚≠ê (—ç–∫–æ–Ω–æ–º–∏—è 389 ‚≠ê)\n"
        message += "üíé Pro –≥–æ–¥: 2999 ‚≠ê (—ç–∫–æ–Ω–æ–º–∏—è 589 ‚≠ê)\n\n"
        
        message += "üéØ <b>–ü—Ä–∏–≤–µ–¥–∏ –¥—Ä—É–≥–∞ - –ø–æ–ª—É—á–∏ –º–µ—Å—è—Ü –±–µ—Å–ø–ª–∞—Ç–Ω–æ!</b>\n"
        message += "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /referral –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞"
        
        return message
    
    @staticmethod
    async def create_payment_invoice(
        user_id: int, 
        tier: SubscriptionTier, 
        duration: str = "monthly"
    ) -> Dict[str, Any]:
        """Create payment invoice for subscription."""
        if tier not in SubscriptionManager.PRICES:
            raise ValueError(f"Invalid subscription tier: {tier}")
        
        if duration not in ["monthly", "yearly"]:
            raise ValueError(f"Invalid duration: {duration}")
        
        price = SubscriptionManager.PRICES[tier][duration]
        
        tier_names = {
            SubscriptionTier.PREMIUM: "Premium",
            SubscriptionTier.PRO: "Pro"
        }
        
        duration_names = {
            "monthly": "–º–µ—Å—è—Ü",
            "yearly": "–≥–æ–¥"
        }
        
        title = f"FACEIT Bot {tier_names[tier]} - {duration_names[duration]}"
        description = f"–ü–æ–¥–ø–∏—Å–∫–∞ {tier_names[tier]} –Ω–∞ {duration_names[duration]}"
        
        return {
            "title": title,
            "description": description,
            "payload": f"{tier.value}_{duration}_{user_id}",
            "currency": "XTR",  # Telegram Stars
            "prices": [{"amount": price, "label": title}]
        }
    
    @staticmethod
    async def process_successful_payment(
        user_id: int, 
        payload: str, 
        telegram_payment_charge_id: str
    ) -> bool:
        """Process successful payment and upgrade subscription."""
        try:
            # Parse payload
            parts = payload.split("_")
            if len(parts) != 3:
                logger.error(f"Invalid payment payload: {payload}")
                return False
            
            tier_str, duration, user_id_str = parts
            
            if int(user_id_str) != user_id:
                logger.error(f"User ID mismatch in payment: {user_id} vs {user_id_str}")
                return False
            
            tier = SubscriptionTier(tier_str)
            duration_days = 30 if duration == "monthly" else 365
            
            # Upgrade subscription
            success = await storage.upgrade_subscription(
                user_id=user_id,
                tier=tier,
                duration_days=duration_days,
                payment_method="telegram_stars"
            )
            
            if success:
                logger.info(f"Successfully upgraded user {user_id} to {tier} for {duration_days} days")
                
                # Log payment for analytics
                await SubscriptionManager._log_payment(
                    user_id, tier, duration, telegram_payment_charge_id
                )
            
            return success
            
        except Exception as e:
            logger.error(f"Error processing payment: {e}")
            return False
    
    @staticmethod
    async def _log_payment(
        user_id: int, 
        tier: SubscriptionTier, 
        duration: str, 
        charge_id: str
    ) -> None:
        """Log payment for analytics (implement based on your analytics needs)."""
        # This could write to a separate payments log file or database
        payment_log = {
            "timestamp": datetime.now().isoformat(),
            "user_id": user_id,
            "tier": tier.value,
            "duration": duration,
            "charge_id": charge_id,
            "amount": SubscriptionManager.PRICES[tier][duration]
        }
        
        logger.info(f"Payment logged: {payment_log}")


# Convenience functions
async def check_subscription_access(user_id: int, required_tier: SubscriptionTier) -> bool:
    """Check if user has required subscription tier or higher."""
    user = await storage.get_user(user_id)
    if not user:
        return False
    
    tier_hierarchy = {
        SubscriptionTier.FREE: 0,
        SubscriptionTier.PREMIUM: 1,
        SubscriptionTier.PRO: 2
    }
    
    user_level = tier_hierarchy.get(user.subscription.tier, 0)
    required_level = tier_hierarchy.get(required_tier, 0)
    
    return user_level >= required_level


async def enforce_rate_limit(user_id: int) -> bool:
    """Enforce rate limiting and return True if request is allowed."""
    if not await storage.can_make_request(user_id):
        return False
    
    await storage.increment_request_count(user_id)
    return True